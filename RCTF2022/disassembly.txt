; Disassembled using luadec 2.2 rev: 895d923 for Lua 5.3 from https://github.com/viruscamp/luadec
; Command line: -dis ../picStore.bin

; Function:        0
; Defined at line: 0
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       2
; Max Stack Size:  2

    0 [-]: CLOSURE   R0 0         ; R0 := closure(Function #0_0)
    1 [-]: SETTABUP  U0 K0 R0     ; U0["menu"] := R0
    2 [-]: CLOSURE   R0 1         ; R0 := closure(Function #0_1)
    3 [-]: SETTABUP  U0 K1 R0     ; U0["upload_impl"] := R0
    4 [-]: CLOSURE   R0 2         ; R0 := closure(Function #0_2)
    5 [-]: SETTABUP  U0 K2 R0     ; U0["download_impl"] := R0
    6 [-]: CLOSURE   R0 3         ; R0 := closure(Function #0_3)
    7 [-]: SETTABUP  U0 K3 R0     ; U0["delete_impl"] := R0
    8 [-]: CLOSURE   R0 4         ; R0 := closure(Function #0_4)
    9 [-]: SETTABUP  U0 K4 R0     ; U0["list_impl"] := R0
   10 [-]: CLOSURE   R0 5         ; R0 := closure(Function #0_5)
   11 [-]: SETTABUP  U0 K5 R0     ; U0["check_impl"] := R0
   12 [-]: CLOSURE   R0 6         ; R0 := closure(Function #0_6)
   13 [-]: SETTABUP  U0 K6 R0     ; U0["main_logic"] := R0
   14 [-]: CLOSURE   R0 7         ; R0 := closure(Function #0_7)
   15 [-]: SETTABUP  U0 K7 R0     ; U0["value_list"] := R0
   16 [-]: CLOSURE   R0 8         ; R0 := closure(Function #0_8)
   17 [-]: SETTABUP  U0 K8 R0     ; U0["tobinary"] := R0
   18 [-]: CLOSURE   R0 9         ; R0 := closure(Function #0_9)
   19 [-]: SETTABUP  U0 K9 R0     ; U0["xor"] := R0
   20 [-]: CLOSURE   R0 10        ; R0 := closure(Function #0_10)
   21 [-]: SETTABUP  U0 K10 R0    ; U0["check_func"] := R0
   22 [-]: CLOSURE   R0 11        ; R0 := closure(Function #0_11)
   23 [-]: SETTABUP  U0 K11 R0    ; U0["main"] := R0
   24 [-]: GETTABUP  R0 U0 K11    ; R0 := U0["main"]
   25 [-]: CALL      R0 1 1       ;  := R0()
   26 [-]: RETURN    R0 1         ; return


; Function:        0_0
; Defined at line: 2
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

    0 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
    1 [-]: LOADK     R1 K1        ; R1 := "-------------------Pictrue Store System-------------------"
    2 [-]: CALL      R0 2 1       ;  := R0(R1)
    3 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
    4 [-]: LOADK     R1 K2        ; R1 := "1. upload"
    5 [-]: CALL      R0 2 1       ;  := R0(R1)
    6 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
    7 [-]: LOADK     R1 K3        ; R1 := "2. download"
    8 [-]: CALL      R0 2 1       ;  := R0(R1)
    9 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
   10 [-]: LOADK     R1 K4        ; R1 := "3. delete"
   11 [-]: CALL      R0 2 1       ;  := R0(R1)
   12 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
   13 [-]: LOADK     R1 K5        ; R1 := "4. list"
   14 [-]: CALL      R0 2 1       ;  := R0(R1)
   15 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
   16 [-]: LOADK     R1 K6        ; R1 := "5. check"
   17 [-]: CALL      R0 2 1       ;  := R0(R1)
   18 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
   19 [-]: LOADK     R1 K7        ; R1 := "6. exit"
   20 [-]: CALL      R0 2 1       ;  := R0(R1)
   21 [-]: GETTABUP  R0 U0 K8     ; R0 := U0["io"]
   22 [-]: GETTABLE  R0 R0 K9     ; R0 := R0["write"]
   23 [-]: LOADK     R1 K10       ; R1 := "choice>> "
   24 [-]: CALL      R0 2 1       ;  := R0(R1)
   25 [-]: RETURN    R0 1         ; return


; Function:        0_1
; Defined at line: 14
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

    0 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["a_f3_9a7nhRC"]
    1 [-]: CALL      R0 1 2       ; R0 := R0()
    2 [-]: EQ        1 R0 K1      ; if R0 ~= nil then goto 4 else goto 11
    3 [-]: JMP       R0 7         ; PC += 7 (goto 11)
    4 [-]: GETTABUP  R1 U0 K2     ; R1 := U0["io"]
    5 [-]: GETTABLE  R1 R1 K3     ; R1 := R1["write"]
    6 [-]: LOADK     R2 K4        ; R2 := "img data: "
    7 [-]: CALL      R1 2 1       ;  := R1(R2)
    8 [-]: GETTABUP  R1 U0 K5     ; R1 := U0["a_1sV7zC5yL_"]
    9 [-]: MOVE      R2 R0        ; R2 := R0
   10 [-]: CALL      R1 2 1       ;  := R1(R2)
   11 [-]: RETURN    R0 1         ; return


; Function:        0_2
; Defined at line: 23
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

    0 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["io"]
    1 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["write"]
    2 [-]: LOADK     R1 K2        ; R1 := "link: "
    3 [-]: CALL      R0 2 1       ;  := R0(R1)
    4 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["io"]
    5 [-]: GETTABLE  R0 R0 K3     ; R0 := R0["read"]
    6 [-]: LOADK     R1 K4        ; R1 := "*number"
    7 [-]: CALL      R0 2 2       ; R0 := R0(R1)
    8 [-]: GETTABUP  R1 U0 K5     ; R1 := U0["a_IjKn_GF3FE"]
    9 [-]: MOVE      R2 R0        ; R2 := R0
   10 [-]: CALL      R1 2 2       ; R1 := R1(R2)
   11 [-]: EQ        0 R1 K6      ; if R1 == 1 then goto 13 else goto 20
   12 [-]: JMP       R0 7         ; PC += 7 (goto 20)
   13 [-]: GETTABUP  R1 U0 K0     ; R1 := U0["io"]
   14 [-]: GETTABLE  R1 R1 K1     ; R1 := R1["write"]
   15 [-]: LOADK     R2 K7        ; R2 := "img data: "
   16 [-]: CALL      R1 2 1       ;  := R1(R2)
   17 [-]: GETTABUP  R1 U0 K8     ; R1 := U0["a_TUBSK2FAhN"]
   18 [-]: MOVE      R2 R0        ; R2 := R0
   19 [-]: CALL      R1 2 1       ;  := R1(R2)
   20 [-]: RETURN    R0 1         ; return


; Function:        0_3
; Defined at line: 33
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

    0 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["io"]
    1 [-]: GETTABLE  R0 R0 K1     ; R0 := R0["write"]
    2 [-]: LOADK     R1 K2        ; R1 := "link: "
    3 [-]: CALL      R0 2 1       ;  := R0(R1)
    4 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["io"]
    5 [-]: GETTABLE  R0 R0 K3     ; R0 := R0["read"]
    6 [-]: LOADK     R1 K4        ; R1 := "*number"
    7 [-]: CALL      R0 2 2       ; R0 := R0(R1)
    8 [-]: GETTABUP  R1 U0 K5     ; R1 := U0["a_8jzNK8OZ4i"]
    9 [-]: MOVE      R2 R0        ; R2 := R0
   10 [-]: CALL      R1 2 2       ; R1 := R1(R2)
   11 [-]: EQ        0 R1 K6      ; if R1 == 0 then goto 13 else goto 16
   12 [-]: JMP       R0 3         ; PC += 3 (goto 16)
   13 [-]: GETTABUP  R1 U0 K7     ; R1 := U0["print"]
   14 [-]: LOADK     R2 K8        ; R2 := "error"
   15 [-]: CALL      R1 2 1       ;  := R1(R2)
   16 [-]: RETURN    R0 1         ; return


; Function:        0_4
; Defined at line: 43
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  9

    0 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["print"]
    1 [-]: LOADK     R1 K1        ; R1 := "-------------------img list-------------------"
    2 [-]: CALL      R0 2 1       ;  := R0(R1)
    3 [-]: LOADK     R0 K2        ; R0 := 0
    4 [-]: LOADK     R1 K3        ; R1 := 1
    5 [-]: LT        0 R0 K4      ; if R0 < 30 then goto 7 else goto 24
    6 [-]: JMP       R0 17        ; PC += 17 (goto 24)
    7 [-]: GETTABUP  R2 U0 K5     ; R2 := U0["a_IjKn_GF3FE"]
    8 [-]: MOVE      R3 R0        ; R3 := R0
    9 [-]: CALL      R2 2 2       ; R2 := R2(R3)
   10 [-]: EQ        0 R2 K3      ; if R2 == 1 then goto 12 else goto 22
   11 [-]: JMP       R0 10        ; PC += 10 (goto 22)
   12 [-]: ADD       R1 R1 K3     ; R1 := R1 + 1
   13 [-]: GETTABUP  R3 U0 K0     ; R3 := U0["print"]
   14 [-]: GETTABUP  R4 U0 K6     ; R4 := U0["string"]
   15 [-]: GETTABLE  R4 R4 K7     ; R4 := R4["format"]
   16 [-]: LOADK     R5 K8        ; R5 := "%d. pic_%04d. link: http://%d\n"
   17 [-]: MOVE      R6 R1        ; R6 := R1
   18 [-]: MOVE      R7 R0        ; R7 := R0
   19 [-]: MOVE      R8 R0        ; R8 := R0
   20 [-]: CALL      R4 5 0       ; R4 to top := R4(R5 to R8)
   21 [-]: CALL      R3 0 1       ;  := R3(R4 to top)
   22 [-]: ADD       R0 R0 K3     ; R0 := R0 + 1
   23 [-]: JMP       R0 -19       ; PC += -19 (goto 5)
   24 [-]: RETURN    R0 1         ; return


; Function:        0_5
; Defined at line: 59
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  8

    0 [-]: LOADK     R0 K0        ; R0 := 0
    1 [-]: LOADK     R1 K0        ; R1 := 0
    2 [-]: LOADK     R2 K1        ; R2 := ""
    3 [-]: LOADBOOL  R3 0 0       ; R3 := false
    4 [-]: LT        0 R0 K2      ; if R0 < 30 then goto 6 else goto 27
    5 [-]: JMP       R0 21        ; PC += 21 (goto 27)
    6 [-]: GETTABUP  R4 U0 K3     ; R4 := U0["a_IjKn_GF3FE"]
    7 [-]: MOVE      R5 R0        ; R5 := R0
    8 [-]: CALL      R4 2 2       ; R4 := R4(R5)
    9 [-]: MOD       R5 R0 K4     ; R5 := R0 % 2
   10 [-]: EQ        0 R5 K0      ; if R5 == 0 then goto 12 else goto 25
   11 [-]: JMP       R0 13        ; PC += 13 (goto 25)
   12 [-]: EQ        0 R4 K5      ; if R4 == 1 then goto 14 else goto 25
   13 [-]: JMP       R0 11        ; PC += 11 (goto 25)
   14 [-]: ADD       R1 R1 K5     ; R1 := R1 + 1
   15 [-]: GETTABUP  R5 U0 K6     ; R5 := U0["a_Cc_ClWQsa5"]
   16 [-]: MOVE      R6 R0        ; R6 := R0
   17 [-]: CALL      R5 2 2       ; R5 := R5(R6)
   18 [-]: LEN       R6 R5        ; R6 := #R5
   19 [-]: EQ        1 R6 K4      ; if R6 ~= 2 then goto 21 else goto 22
   20 [-]: JMP       R0 1         ; PC += 1 (goto 22)
   21 [-]: LOADBOOL  R3 1 0       ; R3 := true
   22 [-]: MOVE      R6 R2        ; R6 := R2
   23 [-]: MOVE      R7 R5        ; R7 := R5
   24 [-]: CONCAT    R2 R6 R7     ; R2 := concat(R6 to R7)
   25 [-]: ADD       R0 R0 K5     ; R0 := R0 + 1
   26 [-]: JMP       R0 -23       ; PC += -23 (goto 4)
   27 [-]: EQ        0 R1 K7      ; if R1 == 15 then goto 29 else goto 46
   28 [-]: JMP       R0 17        ; PC += 17 (goto 46)
   29 [-]: LEN       R4 R2        ; R4 := #R2
   30 [-]: EQ        0 R4 K2      ; if R4 == 30 then goto 32 else goto 46
   31 [-]: JMP       R0 14        ; PC += 14 (goto 46)
   32 [-]: EQ        0 R3 K8      ; if R3 == false then goto 34 else goto 46
   33 [-]: JMP       R0 12        ; PC += 12 (goto 46)
   34 [-]: GETTABUP  R4 U0 K9     ; R4 := U0["check_func"]
   35 [-]: MOVE      R5 R2        ; R5 := R2
   36 [-]: CALL      R4 2 2       ; R4 := R4(R5)
   37 [-]: EQ        0 R4 K10     ; if R4 == true then goto 39 else goto 46
   38 [-]: JMP       R0 7         ; PC += 7 (goto 46)
   39 [-]: GETTABUP  R4 U0 K11    ; R4 := U0["print"]
   40 [-]: LOADK     R5 K12       ; R5 := "now, you know the flag~"
   41 [-]: CALL      R4 2 1       ;  := R4(R5)
   42 [-]: GETTABUP  R4 U0 K11    ; R4 := U0["print"]
   43 [-]: MOVE      R5 R2        ; R5 := R2
   44 [-]: CALL      R4 2 1       ;  := R4(R5)
   45 [-]: JMP       R0 3         ; PC += 3 (goto 49)
   46 [-]: GETTABUP  R4 U0 K11    ; R4 := U0["print"]
   47 [-]: LOADK     R5 K13       ; R5 := "you fail!"
   48 [-]: CALL      R4 2 1       ;  := R4(R5)
   49 [-]: RETURN    R0 1         ; return


; Function:        0_6
; Defined at line: 86
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  3

    0 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["menu"]
    1 [-]: CALL      R0 1 1       ;  := R0()
    2 [-]: GETTABUP  R0 U0 K1     ; R0 := U0["io"]
    3 [-]: GETTABLE  R0 R0 K2     ; R0 := R0["read"]
    4 [-]: LOADK     R1 K3        ; R1 := "*l"
    5 [-]: CALL      R0 2 2       ; R0 := R0(R1)
    6 [-]: EQ        0 R0 K4      ; if R0 == "1" then goto 8 else goto 11
    7 [-]: JMP       R0 3         ; PC += 3 (goto 11)
    8 [-]: GETTABUP  R1 U0 K5     ; R1 := U0["upload_impl"]
    9 [-]: CALL      R1 1 1       ;  := R1()
   10 [-]: JMP       R0 -11       ; PC += -11 (goto 0)
   11 [-]: EQ        0 R0 K6      ; if R0 == "2" then goto 13 else goto 16
   12 [-]: JMP       R0 3         ; PC += 3 (goto 16)
   13 [-]: GETTABUP  R1 U0 K7     ; R1 := U0["download_impl"]
   14 [-]: CALL      R1 1 1       ;  := R1()
   15 [-]: JMP       R0 -16       ; PC += -16 (goto 0)
   16 [-]: EQ        0 R0 K8      ; if R0 == "3" then goto 18 else goto 21
   17 [-]: JMP       R0 3         ; PC += 3 (goto 21)
   18 [-]: GETTABUP  R1 U0 K9     ; R1 := U0["delete_impl"]
   19 [-]: CALL      R1 1 1       ;  := R1()
   20 [-]: JMP       R0 -21       ; PC += -21 (goto 0)
   21 [-]: EQ        0 R0 K10     ; if R0 == "4" then goto 23 else goto 26
   22 [-]: JMP       R0 3         ; PC += 3 (goto 26)
   23 [-]: GETTABUP  R1 U0 K11    ; R1 := U0["list_impl"]
   24 [-]: CALL      R1 1 1       ;  := R1()
   25 [-]: JMP       R0 -26       ; PC += -26 (goto 0)
   26 [-]: EQ        0 R0 K12     ; if R0 == "5" then goto 28 else goto 31
   27 [-]: JMP       R0 3         ; PC += 3 (goto 31)
   28 [-]: GETTABUP  R1 U0 K13    ; R1 := U0["check_impl"]
   29 [-]: CALL      R1 1 1       ;  := R1()
   30 [-]: JMP       R0 -31       ; PC += -31 (goto 0)
   31 [-]: EQ        0 R0 K14     ; if R0 == "6" then goto 33 else goto 38
   32 [-]: JMP       R0 5         ; PC += 5 (goto 38)
   33 [-]: GETTABUP  R1 U0 K15    ; R1 := U0["print"]
   34 [-]: LOADK     R2 K16       ; R2 := "bye~"
   35 [-]: CALL      R1 2 1       ;  := R1(R2)
   36 [-]: JMP       R0 5         ; PC += 5 (goto 42)
   37 [-]: JMP       R0 -38       ; PC += -38 (goto 0)
   38 [-]: GETTABUP  R1 U0 K15    ; R1 := U0["print"]
   39 [-]: LOADK     R2 K17       ; R2 := "bad choice"
   40 [-]: CALL      R1 2 1       ;  := R1(R2)
   41 [-]: JMP       R0 -42       ; PC += -42 (goto 0)
   42 [-]: RETURN    R0 1         ; return


; Function:        0_7
; Defined at line: 111
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  10

    0 [-]: NEWTABLE  R1 0 0       ; R1 := {} (size = 0,0)
    1 [-]: LOADK     R2 K0        ; R2 := 1
    2 [-]: GETTABUP  R3 U0 K1     ; R3 := U0["string"]
    3 [-]: GETTABLE  R3 R3 K2     ; R3 := R3["len"]
    4 [-]: MOVE      R4 R0        ; R4 := R0
    5 [-]: CALL      R3 2 2       ; R3 := R3(R4)
    6 [-]: LOADK     R4 K0        ; R4 := 1
    7 [-]: FORPREP   R2 8         ; R2 -= R4; pc += 8 (goto 16)
    8 [-]: LEN       R6 R1        ; R6 := #R1
    9 [-]: ADD       R6 R6 K0     ; R6 := R6 + 1
   10 [-]: GETTABUP  R7 U0 K1     ; R7 := U0["string"]
   11 [-]: GETTABLE  R7 R7 K3     ; R7 := R7["byte"]
   12 [-]: MOVE      R8 R0        ; R8 := R0
   13 [-]: MOVE      R9 R5        ; R9 := R5
   14 [-]: CALL      R7 3 2       ; R7 := R7(R8 to R9)
   15 [-]: SETTABLE  R1 R6 R7     ; R1[R6] := R7
   16 [-]: FORLOOP   R2 -9        ; R2 += R4; if R2 <= R3 then R5 := R2; PC += -9 , goto 8 end
   17 [-]: RETURN    R1 2         ; return R1
   18 [-]: RETURN    R0 1         ; return


; Function:        0_8
; Defined at line: 122
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  5

    0 [-]: MOVE      R1 R0        ; R1 := R0
    1 [-]: LOADK     R2 K0        ; R2 := ""
    2 [-]: MOD       R3 R1 K1     ; R3 := R1 % 2
    3 [-]: EQ        0 R3 K2      ; if R3 == 1 then goto 5 else goto 9
    4 [-]: JMP       R0 4         ; PC += 4 (goto 9)
    5 [-]: MOVE      R3 R2        ; R3 := R2
    6 [-]: LOADK     R4 K3        ; R4 := "1"
    7 [-]: CONCAT    R2 R3 R4     ; R2 := concat(R3 to R4)
    8 [-]: JMP       R0 3         ; PC += 3 (goto 12)
    9 [-]: MOVE      R3 R2        ; R3 := R2
   10 [-]: LOADK     R4 K4        ; R4 := "0"
   11 [-]: CONCAT    R2 R3 R4     ; R2 := concat(R3 to R4)
   12 [-]: GETTABUP  R3 U0 K5     ; R3 := U0["math"]
   13 [-]: GETTABLE  R3 R3 K6     ; R3 := R3["modf"]
   14 [-]: DIV       R4 R1 K1     ; R4 := R1 / 2
   15 [-]: CALL      R3 2 2       ; R3 := R3(R4)
   16 [-]: MOVE      R1 R3        ; R1 := R3
   17 [-]: EQ        0 R1 K7      ; if R1 == 0 then goto 19 else goto 2
   18 [-]: JMP       R0 -17       ; PC += -17 (goto 2)
   19 [-]: GETTABUP  R3 U0 K8     ; R3 := U0["string"]
   20 [-]: GETTABLE  R3 R3 K9     ; R3 := R3["reverse"]
   21 [-]: MOVE      R4 R2        ; R4 := R2
   22 [-]: CALL      R3 2 2       ; R3 := R3(R4)
   23 [-]: MOVE      R2 R3        ; R2 := R3
   24 [-]: RETURN    R2 2         ; return R2
   25 [-]: RETURN    R0 1         ; return


; Function:        0_9
; Defined at line: 137
; #Upvalues:       1
; #Parameters:     2
; Is_vararg:       0
; Max Stack Size:  18

    0 [-]: GETTABUP  R2 U0 K0     ; R2 := U0["tobinary"]
    1 [-]: MOVE      R3 R0        ; R3 := R0
    2 [-]: CALL      R2 2 2       ; R2 := R2(R3)
    3 [-]: GETTABUP  R3 U0 K0     ; R3 := U0["tobinary"]
    4 [-]: MOVE      R4 R1        ; R4 := R1
    5 [-]: CALL      R3 2 2       ; R3 := R3(R4)
    6 [-]: GETTABUP  R4 U0 K1     ; R4 := U0["string"]
    7 [-]: GETTABLE  R4 R4 K2     ; R4 := R4["len"]
    8 [-]: MOVE      R5 R2        ; R5 := R2
    9 [-]: CALL      R4 2 2       ; R4 := R4(R5)
   10 [-]: GETTABUP  R5 U0 K1     ; R5 := U0["string"]
   11 [-]: GETTABLE  R5 R5 K2     ; R5 := R5["len"]
   12 [-]: MOVE      R6 R3        ; R6 := R3
   13 [-]: CALL      R5 2 2       ; R5 := R5(R6)
   14 [-]: LOADK     R6 K3        ; R6 := 0
   15 [-]: LOADK     R7 K3        ; R7 := 0
   16 [-]: LOADK     R8 K4        ; R8 := ""
   17 [-]: LT        0 R5 R4      ; if R5 < R4 then goto 19 else goto 34
   18 [-]: JMP       R0 15        ; PC += 15 (goto 34)
   19 [-]: GETTABUP  R9 U0 K5     ; R9 := U0["math"]
   20 [-]: GETTABLE  R9 R9 K6     ; R9 := R9["floor"]
   21 [-]: SUB       R10 R4 R5    ; R10 := R4 - R5
   22 [-]: CALL      R9 2 2       ; R9 := R9(R10)
   23 [-]: MOVE      R7 R9        ; R7 := R9
   24 [-]: LOADK     R9 K7        ; R9 := 1
   25 [-]: MOVE      R10 R7       ; R10 := R7
   26 [-]: LOADK     R11 K7       ; R11 := 1
   27 [-]: FORPREP   R9 3         ; R9 -= R11; pc += 3 (goto 31)
   28 [-]: LOADK     R13 K8       ; R13 := "0"
   29 [-]: MOVE      R14 R3       ; R14 := R3
   30 [-]: CONCAT    R3 R13 R14   ; R3 := concat(R13 to R14)
   31 [-]: FORLOOP   R9 -4        ; R9 += R11; if R9 <= R10 then R12 := R9; PC += -4 , goto 28 end
   32 [-]: MOVE      R6 R4        ; R6 := R4
   33 [-]: JMP       R0 16        ; PC += 16 (goto 50)
   34 [-]: LT        0 R4 R5      ; if R4 < R5 then goto 36 else goto 50
   35 [-]: JMP       R0 14        ; PC += 14 (goto 50)
   36 [-]: GETTABUP  R9 U0 K5     ; R9 := U0["math"]
   37 [-]: GETTABLE  R9 R9 K6     ; R9 := R9["floor"]
   38 [-]: SUB       R10 R5 R4    ; R10 := R5 - R4
   39 [-]: CALL      R9 2 2       ; R9 := R9(R10)
   40 [-]: MOVE      R7 R9        ; R7 := R9
   41 [-]: LOADK     R9 K7        ; R9 := 1
   42 [-]: MOVE      R10 R7       ; R10 := R7
   43 [-]: LOADK     R11 K7       ; R11 := 1
   44 [-]: FORPREP   R9 3         ; R9 -= R11; pc += 3 (goto 48)
   45 [-]: LOADK     R13 K8       ; R13 := "0"
   46 [-]: MOVE      R14 R2       ; R14 := R2
   47 [-]: CONCAT    R2 R13 R14   ; R2 := concat(R13 to R14)
   48 [-]: FORLOOP   R9 -4        ; R9 += R11; if R9 <= R10 then R12 := R9; PC += -4 , goto 45 end
   49 [-]: MOVE      R6 R5        ; R6 := R5
   50 [-]: LOADK     R9 K7        ; R9 := 1
   51 [-]: MOVE      R10 R6       ; R10 := R6
   52 [-]: LOADK     R11 K7       ; R11 := 1
   53 [-]: FORPREP   R9 21        ; R9 -= R11; pc += 21 (goto 75)
   54 [-]: GETTABUP  R13 U0 K1    ; R13 := U0["string"]
   55 [-]: GETTABLE  R13 R13 K9   ; R13 := R13["sub"]
   56 [-]: MOVE      R14 R2       ; R14 := R2
   57 [-]: MOVE      R15 R12      ; R15 := R12
   58 [-]: MOVE      R16 R12      ; R16 := R12
   59 [-]: CALL      R13 4 2      ; R13 := R13(R14 to R16)
   60 [-]: GETTABUP  R14 U0 K1    ; R14 := U0["string"]
   61 [-]: GETTABLE  R14 R14 K9   ; R14 := R14["sub"]
   62 [-]: MOVE      R15 R3       ; R15 := R3
   63 [-]: MOVE      R16 R12      ; R16 := R12
   64 [-]: MOVE      R17 R12      ; R17 := R12
   65 [-]: CALL      R14 4 2      ; R14 := R14(R15 to R17)
   66 [-]: EQ        0 R13 R14    ; if R13 == R14 then goto 68 else goto 72
   67 [-]: JMP       R0 4         ; PC += 4 (goto 72)
   68 [-]: MOVE      R15 R8       ; R15 := R8
   69 [-]: LOADK     R16 K8       ; R16 := "0"
   70 [-]: CONCAT    R8 R15 R16   ; R8 := concat(R15 to R16)
   71 [-]: JMP       R0 3         ; PC += 3 (goto 75)
   72 [-]: MOVE      R15 R8       ; R15 := R8
   73 [-]: LOADK     R16 K10      ; R16 := "1"
   74 [-]: CONCAT    R8 R15 R16   ; R8 := concat(R15 to R16)
   75 [-]: FORLOOP   R9 -22       ; R9 += R11; if R9 <= R10 then R12 := R9; PC += -22 , goto 54 end
   76 [-]: GETTABUP  R9 U0 K11    ; R9 := U0["tonumber"]
   77 [-]: MOVE      R10 R8       ; R10 := R8
   78 [-]: LOADK     R11 K12      ; R11 := 2
   79 [-]: TAILCALL  R9 3 0       ; R9 to top := R9(R10 to R11)
   80 [-]: RETURN    R9 0         ; return R9 to top
   81 [-]: RETURN    R0 1         ; return


; Function:        0_10
; Defined at line: 172
; #Upvalues:       1
; #Parameters:     1
; Is_vararg:       0
; Max Stack Size:  54

    0 [-]: GETTABUP  R1 U0 K0     ; R1 := U0["value_list"]
    1 [-]: MOVE      R2 R0        ; R2 := R0
    2 [-]: CALL      R1 2 2       ; R1 := R1(R2)
    3 [-]: NEWTABLE  R2 0 0       ; R2 := {} (size = 0,0)
    4 [-]: NEWTABLE  R3 48 0      ; R3 := {} (size = 48,0)
    5 [-]: LOADK     R4 K1        ; R4 := 105
    6 [-]: LOADK     R5 K2        ; R5 := 244
    7 [-]: LOADK     R6 K3        ; R6 := 63
    8 [-]: LOADK     R7 K4        ; R7 := 10
    9 [-]: LOADK     R8 K5        ; R8 := 24
   10 [-]: LOADK     R9 K6        ; R9 := 169
   11 [-]: LOADK     R10 K7       ; R10 := 248
   12 [-]: LOADK     R11 K8       ; R11 := 107
   13 [-]: LOADK     R12 K9       ; R12 := 129
   14 [-]: LOADK     R13 K10      ; R13 := 138
   15 [-]: LOADK     R14 K11      ; R14 := 25
   16 [-]: LOADK     R15 K12      ; R15 := 182
   17 [-]: LOADK     R16 K13      ; R16 := 96
   18 [-]: LOADK     R17 K14      ; R17 := 176
   19 [-]: LOADK     R18 K15      ; R18 := 14
   20 [-]: LOADK     R19 K16      ; R19 := 89
   21 [-]: LOADK     R20 K17      ; R20 := 56
   22 [-]: LOADK     R21 K18      ; R21 := 229
   23 [-]: LOADK     R22 K19      ; R22 := 206
   24 [-]: LOADK     R23 K20      ; R23 := 19
   25 [-]: LOADK     R24 K21      ; R24 := 23
   26 [-]: LOADK     R25 K22      ; R25 := 21
   27 [-]: LOADK     R26 K23      ; R26 := 22
   28 [-]: LOADK     R27 K24      ; R27 := 198
   29 [-]: LOADK     R28 K25      ; R28 := 179
   30 [-]: LOADK     R29 K26      ; R29 := 167
   31 [-]: LOADK     R30 K27      ; R30 := 152
   32 [-]: LOADK     R31 K28      ; R31 := 66
   33 [-]: LOADK     R32 K29      ; R32 := 28
   34 [-]: LOADK     R33 K30      ; R33 := 201
   35 [-]: LOADK     R34 K31      ; R34 := 213
   36 [-]: LOADK     R35 K32      ; R35 := 80
   37 [-]: LOADK     R36 K33      ; R36 := 162
   38 [-]: LOADK     R37 K34      ; R37 := 151
   39 [-]: LOADK     R38 K35      ; R38 := 102
   40 [-]: LOADK     R39 K36      ; R39 := 36
   41 [-]: LOADK     R40 K37      ; R40 := 91
   42 [-]: LOADK     R41 K38      ; R41 := 37
   43 [-]: LOADK     R42 K39      ; R42 := 50
   44 [-]: LOADK     R43 K40      ; R43 := 17
   45 [-]: LOADK     R44 K41      ; R44 := 170
   46 [-]: LOADK     R45 K42      ; R45 := 41
   47 [-]: LOADK     R46 K43      ; R46 := 3
   48 [-]: LOADK     R47 K44      ; R47 := 84
   49 [-]: LOADK     R48 K45      ; R48 := 85
   50 [-]: LOADK     R49 K46      ; R49 := 226
   51 [-]: LOADK     R50 K47      ; R50 := 131
   52 [-]: LOADK     R51 K48      ; R51 := 38
   53 [-]: LOADK     R52 K49      ; R52 := 71
   54 [-]: LOADK     R53 K50      ; R53 := 32
   55 [-]: SETLIST   R3 50 1      ; R3[0] to R3[49] := R4 to R53 ; R(a)[(c-1)*FPF+i] := R(a+i), 1 <= i <= b, a=3, b=50, c=1, FPF=50
   56 [-]: LOADK     R4 K51       ; R4 := 18
   57 [-]: LOADK     R5 K52       ; R5 := 142
   58 [-]: LOADK     R6 K53       ; R6 := 70
   59 [-]: LOADK     R7 K54       ; R7 := 39
   60 [-]: LOADK     R8 K55       ; R8 := 112
   61 [-]: LOADK     R9 K56       ; R9 := 220
   62 [-]: LOADK     R10 K57      ; R10 := 16
   63 [-]: LOADK     R11 K58      ; R11 := 219
   64 [-]: LOADK     R12 K59      ; R12 := 159
   65 [-]: LOADK     R13 K60      ; R13 := 222
   66 [-]: LOADK     R14 K61      ; R14 := 11
   67 [-]: LOADK     R15 K62      ; R15 := 119
   68 [-]: LOADK     R16 K63      ; R16 := 99
   69 [-]: LOADK     R17 K64      ; R17 := 203
   70 [-]: LOADK     R18 K65      ; R18 := 47
   71 [-]: LOADK     R19 K66      ; R19 := 148
   72 [-]: LOADK     R20 K67      ; R20 := 185
   73 [-]: LOADK     R21 K68      ; R21 := 55
   74 [-]: LOADK     R22 K69      ; R22 := 93
   75 [-]: LOADK     R23 K70      ; R23 := 48
   76 [-]: LOADK     R24 K71      ; R24 := 153
   77 [-]: LOADK     R25 K72      ; R25 := 113
   78 [-]: LOADK     R26 K73      ; R26 := 1
   79 [-]: LOADK     R27 K74      ; R27 := 237
   80 [-]: LOADK     R28 K75      ; R28 := 35
   81 [-]: LOADK     R29 K76      ; R29 := 75
   82 [-]: LOADK     R30 K77      ; R30 := 67
   83 [-]: LOADK     R31 K78      ; R31 := 155
   84 [-]: LOADK     R32 K79      ; R32 := 161
   85 [-]: LOADK     R33 K80      ; R33 := 74
   86 [-]: LOADK     R34 K81      ; R34 := 108
   87 [-]: LOADK     R35 K82      ; R35 := 76
   88 [-]: LOADK     R36 K83      ; R36 := 181
   89 [-]: LOADK     R37 K84      ; R37 := 233
   90 [-]: LOADK     R38 K85      ; R38 := 186
   91 [-]: LOADK     R39 K86      ; R39 := 44
   92 [-]: LOADK     R40 K87      ; R40 := 125
   93 [-]: LOADK     R41 K88      ; R41 := 232
   94 [-]: LOADK     R42 K89      ; R42 := 88
   95 [-]: LOADK     R43 K90      ; R43 := 8
   96 [-]: LOADK     R44 K91      ; R44 := 95
   97 [-]: LOADK     R45 K92      ; R45 := 163
   98 [-]: LOADK     R46 K93      ; R46 := 200
   99 [-]: LOADK     R47 K94      ; R47 := 249
  100 [-]: LOADK     R48 K95      ; R48 := 120
  101 [-]: LOADK     R49 K96      ; R49 := 243
  102 [-]: LOADK     R50 K97      ; R50 := 174
  103 [-]: LOADK     R51 K98      ; R51 := 212
  104 [-]: LOADK     R52 K99      ; R52 := 252
  105 [-]: LOADK     R53 K100     ; R53 := 234
  106 [-]: SETLIST   R3 50 2      ; R3[50] to R3[99] := R4 to R53 ; R(a)[(c-1)*FPF+i] := R(a+i), 1 <= i <= b, a=3, b=50, c=2, FPF=50
  107 [-]: LOADK     R4 K101      ; R4 := 58
  108 [-]: LOADK     R5 K102      ; R5 := 101
  109 [-]: LOADK     R6 K103      ; R6 := 228
  110 [-]: LOADK     R7 K104      ; R7 := 86
  111 [-]: LOADK     R8 K105      ; R8 := 109
  112 [-]: LOADK     R9 K106      ; R9 := 144
  113 [-]: LOADK     R10 K107     ; R10 := 104
  114 [-]: LOADK     R11 K108     ; R11 := 121
  115 [-]: LOADK     R12 K109     ; R12 := 117
  116 [-]: LOADK     R13 K110     ; R13 := 87
  117 [-]: LOADK     R14 K111     ; R14 := 15
  118 [-]: LOADK     R15 K112     ; R15 := 132
  119 [-]: LOADK     R16 K113     ; R16 := 12
  120 [-]: LOADK     R17 K114     ; R17 := 20
  121 [-]: LOADK     R18 K115     ; R18 := 165
  122 [-]: LOADK     R19 K116     ; R19 := 115
  123 [-]: LOADK     R20 K117     ; R20 := 136
  124 [-]: LOADK     R21 K118     ; R21 := 135
  125 [-]: LOADK     R22 K119     ; R22 := 118
  126 [-]: LOADK     R23 K120     ; R23 := 69
  127 [-]: LOADK     R24 K121     ; R24 := 68
  128 [-]: LOADK     R25 K122     ; R25 := 2
  129 [-]: LOADK     R26 K123     ; R26 := 82
  130 [-]: LOADK     R27 K124     ; R27 := 123
  131 [-]: LOADK     R28 K125     ; R28 := 250
  132 [-]: LOADK     R29 K126     ; R29 := 251
  133 [-]: LOADK     R30 K127     ; R30 := 53
  134 [-]: LOADK     R31 K128     ; R31 := 255
  135 [-]: LOADK     R32 K129     ; R32 := 51
  136 [-]: LOADK     R33 K130     ; R33 := 221
  137 [-]: LOADK     R34 K131     ; R34 := 211
  138 [-]: LOADK     R35 K132     ; R35 := 195
  139 [-]: LOADK     R36 K133     ; R36 := 145
  140 [-]: LOADK     R37 K134     ; R37 := 140
  141 [-]: LOADK     R38 K135     ; R38 := 254
  142 [-]: LOADK     R39 K136     ; R39 := 0
  143 [-]: LOADK     R40 K137     ; R40 := 116
  144 [-]: LOADK     R41 K138     ; R41 := 43
  145 [-]: LOADK     R42 K139     ; R42 := 29
  146 [-]: LOADK     R43 K140     ; R43 := 217
  147 [-]: LOADK     R44 K141     ; R44 := 197
  148 [-]: LOADK     R45 K142     ; R45 := 183
  149 [-]: LOADK     R46 K143     ; R46 := 168
  150 [-]: LOADK     R47 K144     ; R47 := 188
  151 [-]: LOADK     R48 K145     ; R48 := 34
  152 [-]: LOADK     R49 K146     ; R49 := 218
  153 [-]: LOADK     R50 K147     ; R50 := 146
  154 [-]: LOADK     R51 K148     ; R51 := 147
  155 [-]: LOADK     R52 K149     ; R52 := 98
  156 [-]: LOADK     R53 K150     ; R53 := 149
  157 [-]: SETLIST   R3 50 3      ; R3[100] to R3[149] := R4 to R53 ; R(a)[(c-1)*FPF+i] := R(a+i), 1 <= i <= b, a=3, b=50, c=3, FPF=50
  158 [-]: LOADK     R4 K151      ; R4 := 246
  159 [-]: LOADK     R5 K152      ; R5 := 180
  160 [-]: LOADK     R6 K153      ; R6 := 103
  161 [-]: LOADK     R7 K154      ; R7 := 33
  162 [-]: LOADK     R8 K155      ; R8 := 40
  163 [-]: LOADK     R9 K156      ; R9 := 207
  164 [-]: LOADK     R10 K157     ; R10 := 208
  165 [-]: LOADK     R11 K158     ; R11 := 192
  166 [-]: LOADK     R12 K159     ; R12 := 143
  167 [-]: LOADK     R13 K160     ; R13 := 26
  168 [-]: LOADK     R14 K161     ; R14 := 154
  169 [-]: LOADK     R15 K162     ; R15 := 225
  170 [-]: LOADK     R16 K163     ; R16 := 100
  171 [-]: LOADK     R17 K164     ; R17 := 141
  172 [-]: LOADK     R18 K165     ; R18 := 175
  173 [-]: LOADK     R19 K166     ; R19 := 124
  174 [-]: LOADK     R20 K167     ; R20 := 230
  175 [-]: LOADK     R21 K168     ; R21 := 62
  176 [-]: LOADK     R22 K169     ; R22 := 177
  177 [-]: LOADK     R23 K170     ; R23 := 205
  178 [-]: LOADK     R24 K171     ; R24 := 110
  179 [-]: LOADK     R25 K172     ; R25 := 202
  180 [-]: LOADK     R26 K173     ; R26 := 253
  181 [-]: LOADK     R27 K174     ; R27 := 173
  182 [-]: LOADK     R28 K175     ; R28 := 46
  183 [-]: LOADK     R29 K176     ; R29 := 52
  184 [-]: LOADK     R30 K177     ; R30 := 114
  185 [-]: LOADK     R31 K178     ; R31 := 164
  186 [-]: LOADK     R32 K179     ; R32 := 166
  187 [-]: LOADK     R33 K180     ; R33 := 137
  188 [-]: LOADK     R34 K181     ; R34 := 158
  189 [-]: LOADK     R35 K182     ; R35 := 122
  190 [-]: LOADK     R36 K183     ; R36 := 13
  191 [-]: LOADK     R37 K184     ; R37 := 83
  192 [-]: LOADK     R38 K185     ; R38 := 178
  193 [-]: LOADK     R39 K186     ; R39 := 133
  194 [-]: LOADK     R40 K187     ; R40 := 189
  195 [-]: LOADK     R41 K188     ; R41 := 187
  196 [-]: LOADK     R42 K189     ; R42 := 7
  197 [-]: LOADK     R43 K190     ; R43 := 184
  198 [-]: LOADK     R44 K191     ; R44 := 77
  199 [-]: LOADK     R45 K192     ; R45 := 245
  200 [-]: LOADK     R46 K193     ; R46 := 216
  201 [-]: LOADK     R47 K194     ; R47 := 190
  202 [-]: LOADK     R48 K195     ; R48 := 194
  203 [-]: LOADK     R49 K196     ; R49 := 72
  204 [-]: LOADK     R50 K197     ; R50 := 157
  205 [-]: LOADK     R51 K198     ; R51 := 172
  206 [-]: LOADK     R52 K199     ; R52 := 171
  207 [-]: LOADK     R53 K200     ; R53 := 199
  208 [-]: SETLIST   R3 50 4      ; R3[150] to R3[199] := R4 to R53 ; R(a)[(c-1)*FPF+i] := R(a+i), 1 <= i <= b, a=3, b=50, c=4, FPF=50
  209 [-]: LOADK     R4 K201      ; R4 := 160
  210 [-]: LOADK     R5 K202      ; R5 := 45
  211 [-]: LOADK     R6 K203      ; R6 := 49
  212 [-]: LOADK     R7 K204      ; R7 := 27
  213 [-]: LOADK     R8 K205      ; R8 := 204
  214 [-]: LOADK     R9 K206      ; R9 := 81
  215 [-]: LOADK     R10 K207     ; R10 := 6
  216 [-]: LOADK     R11 K208     ; R11 := 92
  217 [-]: LOADK     R12 K209     ; R12 := 59
  218 [-]: LOADK     R13 K210     ; R13 := 209
  219 [-]: LOADK     R14 K211     ; R14 := 239
  220 [-]: LOADK     R15 K212     ; R15 := 130
  221 [-]: LOADK     R16 K213     ; R16 := 97
  222 [-]: LOADK     R17 K214     ; R17 := 61
  223 [-]: LOADK     R18 K215     ; R18 := 214
  224 [-]: LOADK     R19 K216     ; R19 := 215
  225 [-]: LOADK     R20 K217     ; R20 := 73
  226 [-]: LOADK     R21 K218     ; R21 := 90
  227 [-]: LOADK     R22 K219     ; R22 := 126
  228 [-]: LOADK     R23 K220     ; R23 := 42
  229 [-]: LOADK     R24 K221     ; R24 := 30
  230 [-]: LOADK     R25 K222     ; R25 := 240
  231 [-]: LOADK     R26 K223     ; R26 := 79
  232 [-]: LOADK     R27 K224     ; R27 := 224
  233 [-]: LOADK     R28 K225     ; R28 := 78
  234 [-]: LOADK     R29 K226     ; R29 := 223
  235 [-]: LOADK     R30 K227     ; R30 := 111
  236 [-]: LOADK     R31 K228     ; R31 := 60
  237 [-]: LOADK     R32 K229     ; R32 := 4
  238 [-]: LOADK     R33 K230     ; R33 := 5
  239 [-]: LOADK     R34 K231     ; R34 := 196
  240 [-]: LOADK     R35 K232     ; R35 := 231
  241 [-]: LOADK     R36 K233     ; R36 := 106
  242 [-]: LOADK     R37 K234     ; R37 := 64
  243 [-]: LOADK     R38 K235     ; R38 := 139
  244 [-]: LOADK     R39 K236     ; R39 := 235
  245 [-]: LOADK     R40 K237     ; R40 := 150
  246 [-]: LOADK     R41 K238     ; R41 := 227
  247 [-]: LOADK     R42 K239     ; R42 := 238
  248 [-]: LOADK     R43 K240     ; R43 := 191
  249 [-]: LOADK     R44 K241     ; R44 := 127
  250 [-]: LOADK     R45 K242     ; R45 := 31
  251 [-]: LOADK     R46 K243     ; R46 := 156
  252 [-]: LOADK     R47 K244     ; R47 := 54
  253 [-]: LOADK     R48 K245     ; R48 := 241
  254 [-]: LOADK     R49 K246     ; R49 := 242
  255 [-]: LOADK     R50 K247     ; R50 := 134
  256 [-]: LOADK     R51 K248     ; R51 := 247
  257 [-]: LOADK     R52 K249     ; R52 := 128
  258 [-]: LOADK     R53 K250     ; R53 := 65
  259 [-]: SETLIST   R3 50 5      ; R3[200] to R3[249] := R4 to R53 ; R(a)[(c-1)*FPF+i] := R(a+i), 1 <= i <= b, a=3, b=50, c=5, FPF=50
  260 [-]: LOADK     R4 K251      ; R4 := 94
  261 [-]: LOADK     R5 K252      ; R5 := 57
  262 [-]: LOADK     R6 K253      ; R6 := 210
  263 [-]: LOADK     R7 K254      ; R7 := 236
  264 [-]: LOADK     R8 K255      ; R8 := 9
  265 [-]: LOADK     R9 K256      ; R9 := 193
  266 [-]: SETLIST   R3 6 6       ; R3[250] to R3[255] := R4 to R9 ; R(a)[(c-1)*FPF+i] := R(a+i), 1 <= i <= b, a=3, b=6, c=6, FPF=50
  267 [-]: LOADK     R4 K73       ; R4 := 1
  268 [-]: LEN       R5 R1        ; R5 := #R1
  269 [-]: LOADK     R6 K73       ; R6 := 1
  270 [-]: FORPREP   R4 21        ; R4 -= R6; pc += 21 (goto 292)
  271 [-]: LOADK     R8 K257      ; R8 := "xor"
  272 [-]: GETTABUP  R8 U0 R8     ; R8 := U0[R8]
  273 [-]: GETTABLE  R9 R1 R7     ; R9 := R1[R7]
  274 [-]: SUB       R10 R7 K73   ; R10 := R7 - 1
  275 [-]: CALL      R8 3 2       ; R8 := R8(R9 to R10)
  276 [-]: SETTABLE  R1 R7 R8     ; R1[R7] := R8
  277 [-]: LOADK     R8 K257      ; R8 := "xor"
  278 [-]: GETTABUP  R8 U0 R8     ; R8 := U0[R8]
  279 [-]: GETTABLE  R9 R1 R7     ; R9 := R1[R7]
  280 [-]: LOADK     R10 K128     ; R10 := 255
  281 [-]: CALL      R8 3 2       ; R8 := R8(R9 to R10)
  282 [-]: SETTABLE  R1 R7 R8     ; R1[R7] := R8
  283 [-]: GETTABLE  R8 R1 R7     ; R8 := R1[R7]
  284 [-]: BAND      R8 R8 K128   ; R8 := R8 & 255
  285 [-]: SETTABLE  R1 R7 R8     ; R1[R7] := R8
  286 [-]: LEN       R8 R2        ; R8 := #R2
  287 [-]: ADD       R8 R8 K73    ; R8 := R8 + 1
  288 [-]: GETTABLE  R9 R1 R7     ; R9 := R1[R7]
  289 [-]: ADD       R9 R9 K73    ; R9 := R9 + 1
  290 [-]: GETTABLE  R9 R3 R9     ; R9 := R3[R9]
  291 [-]: SETTABLE  R2 R8 R9     ; R2[R8] := R9
  292 [-]: FORLOOP   R4 -22       ; R4 += R6; if R4 <= R5 then R7 := R4; PC += -22 , goto 271 end
  293 [-]: LOADK     R4 K258      ; R4 := "a_AHy3JniQH4"
  294 [-]: GETTABUP  R4 U0 R4     ; R4 := U0[R4]
  295 [-]: MOVE      R5 R2        ; R5 := R2
  296 [-]: CALL      R4 2 2       ; R4 := R4(R5)
  297 [-]: EQ        0 R4 K73     ; if R4 == 1 then goto 299 else goto 302
  298 [-]: JMP       R0 3         ; PC += 3 (goto 302)
  299 [-]: LOADBOOL  R4 1 0       ; R4 := true
  300 [-]: RETURN    R4 2         ; return R4
  301 [-]: JMP       R0 2         ; PC += 2 (goto 304)
  302 [-]: LOADBOOL  R4 0 0       ; R4 := false
  303 [-]: RETURN    R4 2         ; return R4
  304 [-]: RETURN    R0 1         ; return


; Function:        0_11
; Defined at line: 198
; #Upvalues:       1
; #Parameters:     0
; Is_vararg:       0
; Max Stack Size:  2

    0 [-]: GETTABUP  R0 U0 K0     ; R0 := U0["a_bfBfrMZriK"]
    1 [-]: CALL      R0 1 1       ;  := R0()
    2 [-]: GETTABUP  R0 U0 K1     ; R0 := U0["main_logic"]
    3 [-]: CALL      R0 1 1       ;  := R0()
    4 [-]: RETURN    R0 1         ; return
