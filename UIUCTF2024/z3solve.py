from z3 import *


# This is just a python implementation of the binary

def EncodeMorton48(arg1, arg2):
    return ((Pad24(arg2)<<1) | Pad24(arg1))&0xffffffffffffffff
    
def EncodeMorton9x7(val):
    o = 0
    for i in range(len(val)):
        o = o | (Pad7(val[i])<<i)
    return o&0xffffffffffffffff

def Pad7(arg1):
    var_10_1 = (arg1 & 0x7f)
    rax_5 = (((var_10_1 << 0x20) | var_10_1) & 0x700000000f)
    rax_9 = (((rax_5 << 0x10) | rax_5) & 0x400030000c0003)
    return (((rax_9 << 8) | rax_9) & 0x40201008040201)


def Pad24(arg1):
    var_10_1 = (arg1 & 0xffffff)
    rax_4 = (((var_10_1 << 0x10) | var_10_1) & 0xff0000ffff)
    rax_8 = (((rax_4 << 8) | rax_4) & 0xff00ff00ff)
    rax_12 = (((rax_8 << 4) | rax_8) & 0xf0f0f0f0f0f)
    rax_16 = (((rax_12 << 2) | rax_12) & 0x333333333333)
    return (((rax_16 << 1) | rax_16) & 0x555555555555)
    

def Unpad64_8(arg1):
    var_10_1 = (arg1 & 0x101010101010101)
    rax_3 = (((var_10_1>>1) | var_10_1) & 0x81008100810081)
    rax_7 = (((rax_3>>2) | rax_3) & 0x80402100804021)
    rax_11 = (((rax_7>>4) | rax_7) & 0x80402010080403)
    rax_15 = (((rax_11>>8) | rax_11) & 0x80006000180007)
    rax_19 = (((rax_15>>0x10) | rax_15) & 0xe00000001f)
    return ((((rax_19>>0x20)&0xff) | rax_19)) & 0xff

def numberOfSetBits(arg1):
    arg1 = arg1 & 0xffffffff
    var_c_1 = (arg1 - ((arg1>>1) & 0x55555555))& 0xffffffff
    rax_8 = (((var_c_1 >> 2) & 0x33333333) + (var_c_1 & 0x33333333))
    return (((((rax_8 + (rax_8 >> 4)) & 0xf0f0f0f) * 0x1010101) & 0xffffffff) >> 0x18)

def hash(arg1):
    rax_3 = (((arg1 >> 0x10) ^ arg1) * 0x45d9f3b) & 0xffffffff
    rax_7 = (((rax_3 >> 0x10) ^ rax_3) * 0x45d9f3b) & 0xffffffff
    return (rax_7 ^ (rax_7 >> 0x10)) & 0xffffffff

def encode(x, y):
    x = x & 0xffffffff
    y = y & 0xffffffff
    
    p0 = ((y>>0x1c) | ((x << 4) & 0xff0))&0xffff
    p1 = (y>>0x10) & 0xfff

    numToEncode = p0 | (EncodeMorton48((x>>8), p1) << 0xc)

    nums = [(Unpad64_8((numToEncode>>i)) )&0xff for i in range(8)]
    
    tmp = nums[1]
    nums[1] = nums[5]
    nums[5] = tmp

    rdx_27 =  ((nums[0] << 8) | nums[1]) ^  (nums[3] | (nums[2] << 8))
    rax_111 = ((nums[7] | (nums[6] << 8)) ^ (rdx_27 ^ (nums[5] | (nums[4] << 8))))
    rax_113 = numberOfSetBits(rax_111)

    rdx_36 = ((nums[1]>>1) & 0x40) | ((nums[2]>>2) & 0x20) | ((nums[3]>>3) & 0x10) | ((nums[4]>>4) & 8) | ((nums[5]>>5) & 4) | ((nums[6]>>6) & 2) | ((nums[7]>>7) & 1)
    
    encodeInput = [(nums[0] & 0x7f), (nums[1] & 0x7f), 
        (nums[2] & 0x7f), (nums[3] & 0x7f), (nums[4] & 0x7f), (nums[5] & 0x7f),
        (nums[6] & 0x7f), (nums[7] & 0x7f), rdx_36]
    rax_245 = EncodeMorton9x7(encodeInput)
    
    rax_245_2 = (nums[0]>>7) << 0x3f
    res = (rax_245 | rax_245_2)
    
    # return number of set bits and encoded output
    return rax_113, res

# from binary
correct_checksums = [0xcd4f2531,0x23531b52,0xc3c978e8,0x08d5d6f3,0x23531b52,0xcd4f2531,0xc3c978e8,0x46a636a4,0x23531b52,0x9a9f4a63,0xc3c978e8,0x23531b52,0xcd4f2531,0x23531b52,0xc3c978e8,0xc3c978e8,0xc3c978e8,0x23531b52,0xc3c978e8,0xdfb6d245,0xc3c978e8,0xc3c978e8,0x9a9f4a63,0x08d5d6f3,0x08d5d6f3,0xcd4f2531,0xc3c978e8,0x46a636a4,0xc3c978e8,0x23531b52,0x04c8214b,0x08d5d6f3,0xc3c978e8,0x9a9f4a63,0x23531b52,0x9a9f4a63,0xcd4f2531,0x08d5d6f3,0xdfb6d245,0x9a9f4a63,0x23531b52,0x23531b52,0xc3c978e8,0x08d5d6f3,0x08d5d6f3,0x9a9f4a63,0xcd4f2531,0x08d5d6f3,0x04c8214b,0xc3c978e8,0x04c8214b,0x08d5d6f3,0x08d5d6f3,0x04c8214b,0x9a9f4a63,0xc3c978e8,0x9a9f4a63,0xc3c978e8,0x23531b52,0xcd4f2531,0xc3c978e8,0x08d5d6f3,0x46a636a4,0x9a9f4a63,0xcd4f2531,0x23531b52,0x08d5d6f3,0xdfb6d245,0xc3c978e8,0xcd4f2531,0xc3c978e8,0x9a9f4a63,0x23531b52,0x23531b52,0x9a9f4a63,0xcd4f2531,0x23531b52,0xcd4f2531,0xcd4f2531,0xc3c978e8,0x23531b52,0x04c8214b,0x9a9f4a63,0x08d5d6f3,0x9a9f4a63,0x08d5d6f3,0x9a9f4a63,0x08d5d6f3,0x23531b52,0x08d5d6f3,0xc3c978e8,0x66a79298,0x08d5d6f3,0x9a9f4a63,0x23531b52,0x23531b52,0xcd4f2531,0xc3c978e8,0xc3c978e8,0x9a9f4a63,0x04c8214b,0x9a9f4a63,0x9a9f4a63,0xdfb6d245,0xc3c978e8,0xdfb6d245,0x23531b52,0xc3c978e8,0xcd4f2531,0x23531b52,0x08d5d6f3,0x9a9f4a63,0x04c8214b,0x9a9f4a63,0x04c8214b,0xc3c978e8,0x08d5d6f3,0x9a9f4a63,0x08d5d6f3,0x9a9f4a63,0xc3c978e8,0xc3c978e8,0x04c8214b,0x9a9f4a63,0x08d5d6f3,0x04c8214b,0x08d5d6f3,0x23531b52,0x08d5d6f3,0x9a9f4a63,0xc3c978e8,0xc3c978e8,0x46a636a4,0x04c8214b,0x08d5d6f3,0x9a9f4a63,0xc3c978e8,0x08d5d6f3,0x23531b52,0xc3c978e8,0xc3c978e8,0x23531b52,0x9a9f4a63,0x04c8214b,0x9a9f4a63,0x08d5d6f3,0x9a9f4a63,0x9a9f4a63,0x9a9f4a63,0xc3c978e8,0x23531b52,0x04c8214b,0x9a9f4a63,0xc3c978e8,0x9a9f4a63,0x9a9f4a63,0x08d5d6f3,0x04c8214b,0x0a085b4c,0xc3c978e8,0x04c8214b,0x46a636a4,0x9a9f4a63,0xc3c978e8,0x9a9f4a63,0x04c8214b,0x23531b52,0x9a9f4a63,0x04c8214b,0x08d5d6f3,0x9a9f4a63,0x46a636a4,0x46a636a4,0x9a9f4a63,0xcd4f2531,0x9a9f4a63,0x04c8214b,0xc3c978e8,0x04c8214b,0x08d5d6f3,0xc3c978e8,0xc3c978e8,0x08d5d6f3,0x9a9f4a63,0x46a636a4,0xc3c978e8,0x23531b52,0xc3c978e8,0x08d5d6f3,0x23531b52,0x04c8214b,0x04c8214b,0x04c8214b,0xc3c978e8,0xc3c978e8,0xcd4f2531,0x9a9f4a63,0xc3c978e8,0x08d5d6f3,0x08d5d6f3,0x9a9f4a63,0x9a9f4a63,0x9a9f4a63,0x08d5d6f3,0xc3c978e8,0xc3c978e8,0xc3c978e8,0x9a9f4a63,0x9a9f4a63,0x04c8214b,0x9a9f4a63,0xc3c978e8,0xcd4f2531,0x23531b52,0x9a9f4a63,0x9a9f4a63,0x08d5d6f3,0xc3c978e8,0x08d5d6f3,0xc3c978e8,0xcd4f2531,0x08d5d6f3,0xc3c978e8,0x9a9f4a63,0x04c8214b,0x08d5d6f3,0x04c8214b,0x46a636a4,0x9a9f4a63,0xcd4f2531,0x23531b52,0x9a9f4a63,0xcd4f2531,0xc3c978e8,0x04c8214b,0x08d5d6f3,0xc3c978e8,0x9a9f4a63,0x0a085b4c,0xc3c978e8,0xc3c978e8,0x9a9f4a63,0xcd4f2531,0x04c8214b,0x23531b52,0xcd4f2531,0x04c8214b,0x08d5d6f3,0x0a085b4c,0xc3c978e8,0x46a636a4,0x08d5d6f3,0xc3c978e8,0x9a9f4a63,0xc3c978e8,0xcd4f2531,0x08d5d6f3,0x04c8214b,0x23531b52,0x08d5d6f3,0xcd4f2531,0x9a9f4a63,0x08d5d6f3,0x04c8214b,0x9a9f4a63,0x08d5d6f3,0x08d5d6f3,0x46a636a4,0x9a9f4a63,0x46a636a4,0xc3c978e8,0xcd4f2531,0xc3c978e8,0x04c8214b,0x23531b52,0x08d5d6f3,0x23531b52,0x08d5d6f3,0x08d5d6f3,0xc3c978e8,0x23531b52,0x08d5d6f3,0x9a9f4a63,0x04c8214b,0x08d5d6f3,0x23531b52,0x08d5d6f3,0x9a9f4a63,0x08d5d6f3,0xc3c978e8,0x08d5d6f3,0x9a9f4a63,0x9a9f4a63,0x08d5d6f3,0x04c8214b,0x08d5d6f3,0x04c8214b,0x04c8214b,0xc3c978e8,0x08d5d6f3,0x9a9f4a63,0x9a9f4a63,0x23531b52,0x08d5d6f3,0x9a9f4a63,0x9a9f4a63,0x23531b52,0x08d5d6f3,0xc3c978e8,0x46a636a4,0x04c8214b,0x08d5d6f3,0x46a636a4,0xc3c978e8,0x23531b52,0x08d5d6f3,0x23531b52,0x23531b52,0x9a9f4a63,0x08d5d6f3,0xc3c978e8,0x9a9f4a63,0xc3c978e8,0x23531b52,0xcd4f2531,0x04c8214b,0xcd4f2531,0x9a9f4a63,0x04c8214b,0x04c8214b,0x08d5d6f3,0x04c8214b,0xc3c978e8,0x0a085b4c,0xc3c978e8]

# build table for the hashes of 0-63 (amount of possible bits set)
cctable = {}
for i in range(64):
    cctable[hash(i)] = i

# turn hashes into their inputs for the checksums
correct_bitcounts = [cctable[v] for v in correct_checksums]

# from binary
correct = [0x00022640aba57200,0x0008004479d42852,0x000880054948c092,0x0008a41420193a02,0x00400541d1e04050,0x004821117a352810,0x004a0044c8404a12,0x004a245518302a90,0x004a24557b20d892,0x004a2650e3796050,0x010a01442864e2d0,0x0108a505e86d6802,0x0108a50451e1c880,0x0108a505f3ec4010,0x0108a70169e13012,0x0108a7011af138d0,0x0108860412910010,0x01422700d0b40812,0x0142865141e590c0,0x0142a44551dce092,0x0148a455682d2000,0x014a2545a205aa92,0x0400a0550a055212,0x0402a1044bec02c2,0x0408250471c01280,0x04088145fb0d1852,0x0408834010dc50c0,0x04088211f1a83012,0x050227401a7400c2,0x050202007aa948c0,0x0500835170e80042,0x044a071423453280,0x0448a30420e53000,0x0442a601ba382a52,0x04422751ca9ddad0,0x0442045472a068c0,0x0442810491c9b012,0x0448245568915880,0x044a2044c9fde000,0x0500054449210290,0x0502044461b93242,0x0548851463309a82,0x054825446b34e012,0x05482105ba4cb042,0x0548230008d5c852,0x0548230018dcf292,0x0548261528b93800,0x054807559b9928d0,0x0542a4d162197a02,0x054801913325ba90,0x0548848189197012,0x054a8614b1acb202,0x1002a31432d18890,0x1008074499f8b090,0x054a8304b2d578c0,0x0540a75590c45a40,0x054023543b083ad0,0x050826453af42010,0x1048a00422488082,0x10488015436c0082,0x1048235023e1b840,0x104822401abc48c2,0x1048071423b4e252,0x10480714f370e090,0x104821d022adead2,0x1048a5d190b072d0,0x104a81d0d074a850,0x1102219079e8f2d2,0x110884c1bb8c0212,0x1108a61051c988c2,0x11020650f2100800,0x104a824071b45812,0x10420700d1893a50,0x10402750f19df080,0x100a8600d00128c0,0x14088401fb31d250,0x14082101fb75b802,0x114aa544c324f200,0x140000546a19e842,0x14000515ba2972c2,0x1400071099100a42,0x114aa740731408c0,0x114a82017160ea10,0x1142230402f4c850,0x11408705a135f240,0x1140a654614c0a80,0x1148830563bd5a52,0x114a831519a56080,0x14002355f03950d2,0x14008091e8edd210,0x1400a08032b172d2,0x140821852bc00050,0x144000c449118242,0x1500001461ed8290,0x144aa154b288c082,0x144aa350001cd880,0x144aa7016be07840,0x1500231071e41ad2,0x150026452beccad2,0x144aa58039586a52,0x150024c17a053a42,0x150024c173551a12,0x150a25150a45f2d0,0x154005558b45c802,0x15422005aa558842,0x154880058b8dd252,0x800001046854aac0,0x80020004e175f2c2,0x800280544931f000,0x8008a054c3303a00,0x80482541a1c5d2d2,0x8048210038a542c0,0x80480114aa697840,0x8042a015b3917a52,0x804283502048a0c0,0x8040a310f8d91240,0x8040a314221110d2,0x8040a644ba291890,0x80420615197c2892,0x804aa254fbf8a8d0,0x8102a20478a938d2,0x810a031539f55250,0x81420701f81d7ad0,0x814226501230ba12,0x814003412855cac0,0x810801047a995250,0x8100a105137dea90,0x814aa454f1a5d840,0x814aa21028c50252,0x814a8351c16c80d0,0x814a2711f25cd250,0x814a8245a234bac2,0x814a2715f195d090,0x814a80c189f828c0,0x840082549b2d7a50,0x840203459138a0c0,0x84088644d961aa00,0x844087047b200a90,0x8440a65453248a50,0x8502a14533580092,0x85020414d0e5aa40,0x844aa1055bfca8c2,0x8448a6009814ca52,0x8448a60408a56ad0,0x844a8314b864b210,0x85020304b2293842,0x850803143b6dd212,0x850a0655a1a97092,0x85088711dad17a12,0x8502271050a0b880,0x844aa30050451ac0,0x8542a005195db8c0,0x8542a310022c9892,0x8542a310b9c8d850,0x8548260401907080,0x854883556288f010,0x854a05d0088d1a12,0x854a2180c3c91a52,0x854a859409a96052,0x9000219468cdc212,0x90020584302cb252,0x900800d5e0ac2090,0x90402494e9a49ac0,0x904201c5a829b802,0x9040a245b2a40280,0x900a0744d3e8b2c2,0x900001c029517282,0x854024d08325ca92,0x850a208121fc4810,0x904a0515b26d8812,0x904800459b3de810,0x9040871022a1d0c0,0x9042a251710d0812,0x904206516838a290,0x904222005115c050,0x90482344a38930c0,0x904a0715eae99a42,0x910202059a1532d0,0x9108065542fdf042,0x910a2214a03c58d0,0x910a221058b4f052,0x910282503bbc9852,0x904a82109b2412d2,0x904a8455b9f8c2d2,0x9100251598492a42,0x91088414f0f52052,0x91482545385998d2,0x91482545710492c2,0x91488250c36de0d2,0x9148a7013ac000d2,0x914887150b09f280,0x9148871568412290,0x914a231480d42240,0x94002215299cfa52,0x9400a30508a91ac2,0x9408870528981050,0x940a230589cc5212,0x940a0445b0703092,0x9440a405100dc292,0x94428005b9fcc8d0,0x944884559a6d0852,0x944a2404f21142d2,0x9500241472cd1840,0x9508a410f32c7ac0,0x950885558038c840,0x95088554b3003202,0x95088445da497ac2,0x950887509075e850,0x9508a301dbc11210,0x9508a745e999f850,0x9540260548056000,0x9542a354cac4a892,0x95488610faa94250,0x954a0700985032c2,0x9542860009d18292,0x950aa4445b513ac2,0x0020a75423b48880,0x0020a640f855ba90,0x0022260042397850,0x002a045473f45052,0x002aa05552306240,0x00608310a93d4a02,0x00622351c0388850,0x0062a3105204ea92,0x0062a31039b98a40,0x006a044572b89842,0x006aa2410204d842,0x012002114ae010c0,0x012222117a910282,0x01228315298c82d0,0x012a24057b4d32d2,0x016002014bb03090,0x0160020113c0b0c2,0x012aa214e2d42082,0x012aa214b134a812,0x01602741da91f0d2,0x016803552b74dac2,0x016a86544b7c5292,0x042883048301a280,0x04282641b07d6212,0x04288610033c4050,0x04602150a944da42,0x0468805071794ad0,0x046a24415acc12c0,0x05200044e35d7a02,0x05222504f1e19ad0,0x052a2740e0bcd090,0x05602751192d18d0,0x056203517a69d002,0x0562265501008280,0x052a8710415d8a90,0x0528835109159840,0x05208641a8f070d2,0x05202211eb05d8c2,0x046a8300d1dd1a40,0x04688255a3acd2c0,0x0462a6556a442852,0x04222745a8250ad0,0x0420a3446bc4fa92,0x0460814123a1fa82,0x046205416b91e010,0x056aa1445a453012,0x056aa210290c1ad0,0x056a8700600dea92,0x10200200704152c2,0x10208255a09cb810,0x102206544290c282,0x102a865582498242,0x10602711394ca802,0x10602710b97190c2,0x1060a21152d138c0,0x10620645a3b8f052,0x10680215a0a9ea10,0x106a02448b0502c0,0x106a875139187802,0x106aa741a8892a82,0x1120060089c18850,0x11602455d2f84010,0x1160875062d1fa82,0x112aa600d9510a40,0x112a2314c80c0a82,0x11228241d9248a10,0x11222601bad46a80,0x1122260109b060c0,0x1128a2404870f050,0x11688500516daa10,0x116a055429a87ad0,0x116a25459248a882,0x116a8405f2ac4ad0,0x116aa701c8c402d0,0x1420220153397a00,0x142023140ab00a92,0x14202314c1851842,0x1420275443f1e0c0,0x14208615eb14ea52,0x142827054a9c98c2,0x142a030542544280,0x142aa65520e958c2,0x14608710500132c2,0x142aa651a2003252,0x1428224002a5d0c2,0x14202750ab94ca10,0x1560a64548f04a00,0x1560071439743a02,0x1528264419ecf240,0x15228715e3dc5810,0x1520a3419294e0d2,0x152223019a78a852,0x1528861098889050,0x152a234061a85292,0x152a234009c57a00,0x152824451064e0c0,0x15200545b970f8c0,0x15602500d3380042,0x1560a55423398800,0x1562a145eb6ca800,0x15688405335c88d0,0x156a0015f89c2890,0x156823018b357092,0x156226006a3d6040,0x15680641cbf038d2,0x156aa7111bf5b212,0x8022865179fc2a92,0x8022a31428a11ac0,0x802082044ac42240,0x156a2645eaccca10,0x15688254b10d5a00,0x1568871552381810,0x1568859162609ac0,0x156821801b78ca50,0x156281d1706cf892,0x156081c5218122c0,0x156000d5abb11090,0x152a24d582389002,0x152a00c461119880]

# just make it larger to avoid unsigned issues
xpos = BitVec("xpos", 128)
ypos = BitVec("ypos", 128)

# build equations for encoding
bc, sol = encode(xpos, ypos)

print(len(correct))
for i in range(len(correct)):
    # solve equations for specific index
    s = Solver()
    s.add(bc == correct_bitcounts[i], sol == correct[i])
    s.check()
    m = s.model()
    print(m[xpos].as_long(), m[ypos].as_long())

