def dumpHex(arr):
    s = ""
    for b in arr:
        s = s +(" %02X"%b)
    print(s.strip())
    

def stage1(input):
    charArray = [ord(c) for c in input]
    charArray = charArray + [0]*20

    for i in range(0x18):
        ecx = charArray[i]
        if ecx < 65 or ecx > 90:
            if ecx < 97 or ecx > 0x7A:
                charArray[i] = ecx
            else:
                eax = ecx + 13
                if eax > 0x7A:
                    charArray[i] = ecx-13
                else:
                    charArray[i] = eax
        else:
            eax = ecx + 13
            if eax > 90:
                charArray[i] = ecx -13
            else:
                charArray[i] = eax
                
    return ''.join([chr(c) for c in charArray if c != 0]) # filter 0 bytes out

def stage2(input):
    charArray = [ord(c) for c in input]
    charArray = charArray + [0]*0x10
    
    resArray = [0]*0x678
    
    byteCode = [0xC7, 0x78, 0xB9, 0x59, 0xDA, 0x6A, 0x50, 0x7E, 0x72, 0xF7, 0x74, 0x98, 0x76, 0x30, 0x30, 0x74, 0x72, 0x98, 0x95, 0xED, 0x92, 0xA6, 0xF7, 0xB8, 0x96, 0x34, 0x91, 0xE0, 0xE7, 0x95, 0x98, 0xE2, 0xE2, 0xA5, 0xA4, 0x3B, 0xB6, 0x54, 0x34, 0x94, 0xD3, 0x50, 0x9B, 0xDC, 0xC2, 0x9C, 0x95, 0xD5, 0x39, 0x74, 0x54, 0x78, 0xE5, 0x95, 0x50, 0xDD, 0x2A, 0x34, 0x30, 0x74, 0x74, 0xEF, 0x31, 0x74, 0x72, 0x30, 0x78, 0xFD, 0x58, 0xEA, 0x4B, 0x74, 0x72, 0x30, 0x3F, 0x79, 0xCA, 0x88, 0x88, 0xCC, 0x2A, 0x33, 0x30, 0x74, 0x74, 0xEF, 0x30, 0x74, 0x72, 0x30, 0x78, 0x01, 0xA7, 0x45, 0x35, 0x74, 0x72, 0xEA, 0x40, 0x74, 0x72, 0x30, 0x3F, 0x79, 0xBA, 0x61, 0x02, 0xBC, 0xFD, 0x45, 0x34, 0x79, 0x72, 0x30, 0x78, 0x35, 0x5C, 0x50, 0xB1, 0x6E, 0xE7, 0x7F, 0x81, 0xBE, 0x81, 0xB5, 0xB2, 0x74, 0x72, 0x30, 0x7C, 0x01, 0xAF, 0xD3, 0x30, 0x74, 0x72, 0x7C, 0xBD, 0xA9, 0x58, 0x34, 0x30, 0x74, 0xB3, 0xEC, 0x30, 0x74, 0x72, 0x30, 0x79, 0xF5, 0x6E, 0x7A, 0x34, 0x74, 0x72, 0xAD, 0x6B, 0x2C, 0x7A, 0x30, 0x30, 0x74, 0xBE, 0xB9, 0x11, 0xBD, 0xFB, 0xFA, 0x71, 0x83, 0x28, 0x44, 0x3F, 0xB5, 0xFB, 0xF3, 0x74, 0xFD, 0x42, 0x71, 0xB9, 0x45, 0x0B, 0x74, 0xB9, 0x52, 0x69, 0x2E, 0x78, 0xD7, 0x3C, 0x71, 0x3F, 0x2A, 0x86, 0x3E, 0x74, 0xFD, 0x41, 0x61, 0x07, 0xB5, 0xFA, 0x28, 0x7C, 0xFD, 0x53, 0x75, 0xB8, 0x78, 0x81, 0x79, 0x2F, 0x38, 0x5D, 0xEC, 0x71, 0xFF, 0x89, 0xB1, 0x2A, 0xC9, 0xBA, 0xB9, 0x15, 0xE9, 0x91, 0xE8, 0x34, 0x74, 0x72, 0x32, 0xEF, 0x75, 0x72, 0x30, 0x30, 0xBC, 0xFF, 0x65, 0xC0, 0x78, 0x72, 0x30, 0xEA, 0x80, 0x72, 0x30, 0x30, 0x83, 0x77, 0x61, 0xF0, 0xB5, 0x71, 0x07, 0x1B, 0x9A, 0x2A, 0x34, 0x30, 0x74, 0x74, 0xEF, 0x31, 0x74, 0x72, 0x30, 0x78, 0x01, 0xA7, 0xAD, 0x34, 0x74, 0x72, 0xEA, 0x16, 0x74, 0x72, 0x30, 0x3F, 0x79, 0xA3, 0xF0, 0xE8, 0x75, 0x72, 0x30, 0x32, 0x33, 0x72, 0x30, 0x30, 0x74, 0x81, 0x35, 0x8D, 0x37, 0x8B, 0x32, 0x1A, 0xFB, 0x8F, 0xA5, 0xA1, 0xB4, 0xBE, 0xBD, 0x57, 0xBA, 0xE3, 0x7F, 0x81, 0xBE, 0xBE, 0x52, 0x36, 0x8F, 0xC7, 0x69, 0xC6, 0x82, 0xDA, 0x7E, 0x32, 0x82, 0x72, 0x5A, 0x69, 0x98, 0xAE, 0x6F, 0x47, 0x19, 0xA3, 0x9B, 0x85, 0xDE, 0x9F, 0x9A, 0x38, 0x7E, 0x97, 0x53, 0x64, 0x9F, 0xFD, 0x3E, 0x77, 0xDA, 0x78, 0x5A, 0xA1, 0x97, 0x66, 0x7E, 0x93, 0xD6, 0xE9, 0x20, 0x80, 0xBE, 0xBE, 0x7A, 0x5B, 0x5F, 0x05, 0x25, 0x7A, 0xBE, 0xBE, 0x7A, 0x9C, 0xDB, 0x9F, 0x47, 0x39, 0x86, 0x66, 0x79, 0x93, 0xD6, 0xE9, 0x20, 0x81, 0xBE, 0xBE, 0x7A, 0x5B, 0x63, 0xB2, 0xEC, 0x80, 0xBE, 0xBE, 0x20, 0xA3, 0xD6, 0xE7, 0x7F, 0x8E, 0xC3, 0x76, 0xF1, 0xA6, 0xFB, 0xE6, 0x7F, 0x81, 0x76, 0xFF, 0xD0, 0x73, 0x57, 0x01, 0x68, 0x35, 0xE7, 0xEC, 0x6F, 0x41, 0x9E, 0x6A, 0x72, 0xB3, 0xBF, 0xBE, 0x7A, 0x5B, 0x4C, 0xEF, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xAB, 0xF2, 0x84, 0x0F, 0xBF, 0x7A, 0x93, 0xFE, 0x80, 0x7F, 0x81, 0xBE, 0x76, 0xF7, 0x9E, 0x5B, 0xE6, 0x7F, 0x81, 0x76, 0x68, 0xAA, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x36, 0x1E, 0xDB, 0x73, 0x7E, 0x81, 0xBE, 0x72, 0xF7, 0x9E, 0x43, 0xE6, 0x7F, 0x81, 0x16, 0x06, 0x7A, 0x93, 0xD6, 0x3F, 0x7B, 0x81, 0xBE, 0xC0, 0x25, 0x92, 0xD6, 0xE7, 0x7F, 0x49, 0x3B, 0xEB, 0x4D, 0x92, 0xD6, 0xE7, 0x37, 0x02, 0x00, 0xB6, 0x20, 0x7B, 0xD6, 0xE7, 0x7F, 0x8E, 0xC3, 0x76, 0xF1, 0x96, 0x9B, 0xE6, 0x7F, 0x81, 0x76, 0xEF, 0xC1, 0x5B, 0xC7, 0x2E, 0x37, 0x90, 0x0C, 0x76, 0xAB, 0xCC, 0xB3, 0x28, 0x27, 0x85, 0xBE, 0xBE, 0x78, 0x0C, 0xD7, 0xE7, 0x7F, 0x81, 0x76, 0x33, 0xAF, 0x35, 0xD4, 0xE7, 0x7F, 0x1B, 0x20, 0xBE, 0x7A, 0x93, 0xE1, 0xE2, 0xAE, 0xC1, 0x66, 0xBF, 0x7A, 0x93, 0xD4, 0x3C, 0x7F, 0x81, 0xBE, 0xBE, 0x75, 0x96, 0xAB, 0xAF, 0xF6, 0xE4, 0x76, 0xEF, 0xBA, 0x52, 0x4D, 0xC7, 0x7F, 0x81, 0xBE, 0x77, 0x23, 0x9B, 0xDE, 0xEF, 0x77, 0x89, 0xB6, 0xB6, 0x72, 0x5A, 0x4C, 0xE7, 0x7E, 0x83, 0xBD, 0xBA, 0x7F, 0x95, 0xD9, 0xAB, 0xA6, 0xB9, 0xB2, 0xB2, 0x37, 0x1A, 0xEA, 0x27, 0x32, 0x80, 0xF4, 0x76, 0xE5, 0xD3, 0xFD, 0x0C, 0x37, 0x90, 0xFE, 0x73, 0xAB, 0xDA, 0xA3, 0xB6, 0xCD, 0x4C, 0xB9, 0x6C, 0x86, 0x93, 0xA3, 0xE6, 0xC6, 0x67, 0x77, 0xB5, 0x54, 0xD0, 0xA0, 0xEC, 0x29, 0x7D, 0xCF, 0x73, 0x7B, 0xEA, 0xA3, 0xB6, 0xC4, 0x44, 0x36, 0xF9, 0x37, 0x14, 0x1D, 0xAC, 0x70, 0x17, 0xCA, 0xB6, 0x3F, 0x1B, 0xF2, 0xE7, 0x59, 0x48, 0xB9, 0xA4, 0xB9, 0x54, 0x5E, 0xDB, 0x77, 0x48, 0x29, 0x00, 0x37, 0x82, 0x2D, 0xAB, 0xA6, 0xB3, 0x7B, 0xB5, 0x3E, 0xE0, 0x9E, 0xFC, 0xBF, 0x05, 0xFE, 0xAB, 0x26, 0x6E, 0x15, 0x92, 0x37, 0x08, 0x23, 0x76, 0xAB, 0xD3, 0xA3, 0xB6, 0xCD, 0x67, 0x77, 0xB5, 0x54, 0xD1, 0x78, 0xAE, 0x70, 0x6F, 0xF4, 0x76, 0xA3, 0xD1, 0x8A, 0x72, 0x59, 0x48, 0xB9, 0xA4, 0xB8, 0x5A, 0x11, 0x29, 0x32, 0x90, 0x05, 0x7B, 0xF2, 0xE0, 0x78, 0xAE, 0x70, 0x6F, 0xFD, 0x75, 0x75, 0x05, 0xEA, 0xDE, 0x59, 0x48, 0xB9, 0xA4, 0xB1, 0x35, 0x9F, 0xEC, 0x51, 0xB3, 0x7B, 0xBF, 0xC0, 0x5E, 0xC7, 0x20, 0x3A, 0x09, 0x0D, 0x9C, 0x33, 0x9C, 0x80, 0x30, 0x30, 0x8E, 0x70, 0xCA, 0x83, 0x35, 0x9F, 0xEC, 0x51, 0xBB, 0xA0, 0x77, 0x75, 0x4D, 0x15, 0xA4, 0xF7, 0x75, 0xC7, 0x9C, 0x33, 0x9C, 0x90, 0x30, 0x59, 0x48, 0xB9, 0xA4, 0xC8, 0x54, 0x5E, 0xD3, 0x86, 0x67, 0x77, 0xB5, 0x64, 0xE8, 0xA3, 0xE6, 0xC5, 0x4C, 0xEF, 0x09, 0x3F, 0x1B, 0x25, 0xAC, 0x70, 0x17, 0xD2, 0xC7, 0x36, 0x9C, 0x48, 0xDB, 0x7E, 0x4C, 0xEF, 0x08, 0x3F, 0x1B, 0xEA, 0xE7, 0x37, 0xDE, 0xFE, 0x19, 0xFC, 0x6E, 0x15, 0xF5, 0x93, 0x53, 0xC4, 0xC1, 0x03, 0x9D, 0x8E, 0x3A, 0x0F, 0xE8, 0x96, 0x0E, 0x53, 0x84, 0xBF, 0xFF, 0x8D, 0xD5, 0x23, 0x0E, 0xE1, 0xC0, 0x90, 0x79, 0x5E, 0x58, 0xC7, 0x13, 0x3E, 0xA1, 0xA4, 0xF2, 0xE6, 0x2B, 0xD2, 0xEC, 0x77, 0xAC, 0x44, 0x99, 0x54, 0xD3, 0x94, 0x08, 0x07, 0xBF, 0xD2, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xE7, 0x7F, 0x81, 0xBE, 0xBE, 0x7A, 0x93, 0xD6, 0xC7, 0x9F, 0xA1, 0xDE, 0xDE, 0x3C, 0x52, 0x9F, 0xAB, 0x9F, 0x36, 0x76, 0x7F, 0x36, 0x56, 0xB7, 0xF1, 0x75, 0x36, 0xDE, 0xDE, 0x9A, 0x73, 0xB6, 0x94, 0x9F, 0xA1, 0xDE, 0xDE, 0x9A, 0x73, 0xA9, 0xC7, 0x9F, 0xA1, 0xDE, 0xDE, 0x9A, 0x73, 0xB6, 0xF1, 0x48, 0xA1, 0xDE, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x9F, 0x36, 0xDE, 0xDE, 0x4D, 0x73, 0xB6, 0xC7, 0x9F, 0xA1, 0x91, 0xDE, 0x9A, 0x73, 0xB6, 0xF1, 0x9F, 0xA1, 0xDE, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x9F, 0xA1, 0xDE, 0xDE, 0x9A, 0x73, 0xB9, 0xCD, 0x9F, 0xA1, 0x91, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x9F, 0x8B, 0xDE, 0xDE, 0x94, 0x7E, 0xB4, 0xC9, 0x92, 0xAF, 0x89, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x43, 0xA1, 0x8A, 0xD4, 0x97, 0x7E, 0x92, 0xC7, 0x9F, 0x8B, 0xDE, 0xD5, 0x9A, 0x73, 0xB6, 0xC7, 0x9F, 0xA1, 0xDE, 0xE0, 0x97, 0x7D, 0xC0, 0x9C, 0x40, 0xA8, 0xDE, 0xD4, 0x97, 0x74, 0xB6, 0xC7, 0x9F, 0x8B, 0xAA, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x40, 0xA1, 0xDE, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x9F, 0xA1, 0xD9, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x9F, 0x8B, 0x8A, 0xDD, 0x97, 0x7D, 0xB1, 0x9C, 0x93, 0xA1, 0xDE, 0xDE, 0x94, 0x6C, 0xB1, 0xCD, 0x93, 0xA6, 0xDE, 0xDE, 0x9A, 0x73, 0xB6, 0xC7, 0x9F, 0x8B, 0xDE, 0x9E, 0x9D, 0x7E, 0xC3, 0xCA, 0x92, 0xA6, 0xD8, 0x85, 0x46, 0x7E, 0xC3, 0xC4, 0x9F, 0xA1, 0xDE, 0xDE, 0x9A, 0x73, 0xDC, 0x95, 0x49, 0x37, 0x90, 0x8C, 0x4C, 0x65, 0xA8, 0x95, 0x49, 0x37, 0x90, 0x8C, 0x4C, 0x65, 0xA8, 0x95, 0x49, 0x37, 0x90, 0x8C, 0x70, 0x30, 0x74, 0x72, 0x30, 0x30, 0x74, 0x72, 0x30, 0x30, 0x74, 0x72, 0x30, 0x30, 0x74, 0x72, 0x30, 0x7B, 0xD9, 0xD7, 0xA0, 0x50, 0xDB, 0xE1, 0x99, 0x9E, 0xDB, 0x93, 0x3A, 0x50, 0x94, 0x92, 0x50, 0x50, 0xBA, 0xB3, 0x79, 0x7C, 0x94, 0xC9, 0x78, 0x71, 0xC0, 0xB7, 0x51, 0x3A, 0x7E, 0xC9, 0x50, 0x50, 0x94, 0x92, 0x50, 0x87, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x87, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x50, 0x3A, 0xCB, 0x92, 0x50, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0xC9, 0x50, 0x50, 0xCB, 0x92, 0x50, 0x50, 0x94, 0x92, 0x87, 0x50, 0x94, 0x92, 0x50, 0x3A, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x57, 0x5E, 0x94, 0x92, 0x87, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0x7C, 0x50, 0x50, 0xA2, 0x9F, 0x52, 0x52, 0xA1, 0xA0, 0x8F, 0x50, 0x94, 0x92, 0x50, 0x50, 0xD0, 0x92, 0x8C, 0x5E, 0xA1, 0x9F, 0xAC, 0x50, 0x94, 0x7C, 0x50, 0x5F, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x50, 0x52, 0xA1, 0xA0, 0x5E, 0x8F, 0xD3, 0x9B, 0x50, 0x5E, 0xA1, 0x99, 0x50, 0x50, 0x94, 0x7C, 0xAC, 0x50, 0x94, 0x92, 0x50, 0x50, 0xD3, 0x92, 0x50, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x5F, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0x7C, 0x8C, 0x57, 0xA1, 0xA0, 0x8F, 0x8F, 0xA0, 0x92, 0x50, 0x50, 0xA2, 0xD1, 0x8F, 0x5E, 0xA0, 0x99, 0x50, 0x50, 0x94, 0x92, 0x50, 0x50, 0x94, 0x7C, 0x50, 0x90, 0x9B, 0x9F, 0x5D, 0x5D, 0xA1, 0x99, 0x5E, 0x8F, 0xD0, 0x9F, 0x5D, 0x57, 0x94, 0x92, 0x50, 0x50, 0x94, 0x92, 0x3A, 0x86, 0xCA, 0xC8, 0x86, 0x86, 0xCA, 0xC8, 0x86, 0x86, 0xCA, 0xC8, 0x86, 0x86, 0xCA, 0xC8, 0x86, 0x86, 0xCA, 0xC8, 0x86, 0x86, 0x7E]
    
    r9 = 0
    r10 = 0
    while r9 < 0x678:
        if r10 == 4:
            r10 = 0
        ecx = charArray[r10]
        resArray[r9] = ecx
        r9 = r9 + 1
        r10 = r10 + 1
    r9 = 0
    while r9 < 0x678:
        byteCode[r9] = ((byteCode[r9] - resArray[r9])+0x100) % 0x100
        r9 = r9 + 1
        
    if(byteCode[0] != 0x55): return False # 0x55  0xC7-0x55 = 'r'
    if(byteCode[1] != 0x48): return False # 0x48  0x78-0x48 = '0'
    if(byteCode[2] != 0x89): return False # 0x89  0xB9-0x89 = '0'
    if(byteCode[3] != 0xE5): return False # 0xE5  0x59-0xE5 = 't'
    
    #dumpHex(byteCode)
    
    return True

def stage3(input):
    charArray = [ord(c) for c in input]
    charArray = charArray + [0]*0x10
    
    byteCode = [0x19, 0x02, 0xEA, 0x87, 0x1D, 0x75, 0x71, 0x40, 0x4C, 0x8D, 0x27, 0x46, 0x71, 0x4F, 0x51, 0x4A, 0x4C, 0x22, 0x06, 0x1B, 0x55, 0x39, 0x96, 0x0E, 0x68, 0x4E, 0x02, 0x0E, 0x00, 0x2A, 0x39, 0x24, 0x3C, 0x3F, 0x17, 0xA5, 0x31, 0x6B, 0x55, 0x6A, 0x2D, 0x6A, 0x08, 0x0A, 0x25, 0x23, 0x34, 0x2B, 0x8B, 0x0E, 0x47, 0x66, 0x06, 0x2A, 0x71, 0x23, 0xF4, 0x4E, 0x63, 0x62, 0x77, 0xF0, 0x50, 0x4A, 0x4C, 0x4A, 0x2B, 0xEB, 0x93, 0xF5, 0x4A, 0x4A, 0x4C, 0x4A, 0x6C, 0x67, 0x2D, 0x17, 0x09, 0x12, 0xF4, 0x49, 0x63, 0x62, 0x77, 0xF0, 0x51, 0x4A, 0x4C, 0x4A, 0x2B, 0xEF, 0x40, 0xBC, 0x50, 0x4A, 0x4C, 0xF0, 0x73, 0x62, 0x75, 0x4F, 0x5E, 0x4F, 0x04, 0xC1, 0x76, 0x87, 0x74, 0x4F, 0x51, 0x02, 0x8D, 0xA0, 0x43, 0xE3, 0x8F, 0x38, 0x05, 0x73, 0x7A, 0x3F, 0x11, 0x2A, 0xF8, 0x42, 0x83, 0x4B, 0x4C, 0x4A, 0x2B, 0xD8, 0x7D, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x39, 0xC2, 0x54, 0x9B, 0x4D, 0x4A, 0x63, 0x8A, 0x0E, 0x4F, 0x51, 0x4A, 0x04, 0xC7, 0x6E, 0xE7, 0x74, 0x4F, 0x51, 0x02, 0xF6, 0x7A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x06, 0xEE, 0x67, 0x01, 0x4E, 0x51, 0x4A, 0x00, 0xC7, 0x6E, 0xCF, 0x74, 0x4F, 0x51, 0xA2, 0x94, 0x4A, 0x63, 0x62, 0xCD, 0x4B, 0x51, 0x4A, 0x4E, 0xF5, 0x62, 0x62, 0x75, 0x4F, 0x19, 0xC7, 0x79, 0x1D, 0x62, 0x62, 0x75, 0x07, 0xD2, 0x8C, 0x44, 0xF0, 0x4B, 0x62, 0x75, 0x4F, 0x5E, 0x4F, 0x04, 0xC1, 0x66, 0x27, 0x74, 0x4F, 0x51, 0x02, 0x7D, 0x91, 0x2B, 0x53, 0xBC, 0x07, 0x60, 0x98, 0x04, 0x7B, 0x9C, 0x3F, 0xB6, 0xF7, 0x55, 0x4A, 0x4C, 0x48, 0xDC, 0x63, 0x75, 0x4F, 0x51, 0x02, 0xC1, 0x7F, 0x05, 0x60, 0x75, 0x4F, 0xEB, 0xAC, 0x4C, 0x4A, 0x63, 0x6D, 0x70, 0x7E, 0x91, 0xF2, 0x4D, 0x4A, 0x63, 0x60, 0xCA, 0x4F, 0x51, 0x4A, 0x4C, 0x45, 0x66, 0x37, 0x3D, 0xC6, 0xB4, 0x02, 0x7D, 0x8A, 0x22, 0xD9, 0x55, 0x4F, 0x51, 0x4A, 0x05, 0xF3, 0x6B, 0x6A, 0x7D, 0x47, 0x59, 0x42, 0x44, 0x42, 0x2A, 0xD8, 0x75, 0x4E, 0x53, 0x49, 0x48, 0x4F, 0x65, 0x65, 0x39, 0x76, 0x89, 0x3E, 0x40, 0x07, 0xEA, 0x76, 0xB5, 0x02, 0x50, 0x80, 0x04, 0xB5, 0xA3, 0x89, 0x9A, 0x07, 0x60, 0x8A, 0x01, 0x7B, 0xAA, 0x2F, 0x44, 0x9D, 0x1C, 0x45, 0xFA, 0x56, 0x63, 0x2F, 0x74, 0x96, 0x37, 0x03, 0x43, 0x24, 0xA0, 0x2C, 0x7A, 0xF9, 0x4D, 0x5B, 0x01, 0x4B, 0xBA, 0x2F, 0x44, 0x94, 0x14, 0xC2, 0x87, 0x07, 0xE4, 0xA9, 0x3A, 0x40, 0xE7, 0x56, 0x44, 0x0F, 0xEB, 0x7E, 0x75, 0x29, 0x18, 0x45, 0x32, 0x89, 0x24, 0xEA, 0x69, 0x47, 0x18, 0xB5, 0x8E, 0x07, 0x52, 0xB9, 0x39, 0x76, 0x83, 0x07, 0x43, 0x0E, 0xB0, 0x2A, 0x8A, 0x8F, 0xD5, 0x8A, 0x39, 0xF6, 0x3E, 0xA1, 0x20, 0x07, 0xD8, 0xAF, 0x04, 0x7B, 0xA3, 0x2F, 0x44, 0x9D, 0x37, 0x03, 0x43, 0x24, 0xA1, 0x04, 0x3C, 0x40, 0x3F, 0x80, 0x04, 0x73, 0xA1, 0x16, 0x00, 0x29, 0x18, 0x45, 0x32, 0x88, 0x2A, 0x9D, 0xB7, 0x02, 0x60, 0x91, 0x09, 0xC2, 0xB0, 0x04, 0x3C, 0x40, 0x3F, 0x89, 0x03, 0x45, 0xD5, 0x76, 0x6C, 0x29, 0x18, 0x45, 0x32, 0x81, 0x05, 0x2B, 0x7A, 0x21, 0x83, 0x07, 0x4D, 0x90, 0x2E, 0x53, 0xAE, 0x0A, 0xD9, 0x99, 0x2A, 0x03, 0x6C, 0x0C, 0xBE, 0x00, 0x5E, 0xFC, 0x58, 0x53, 0x05, 0x2B, 0x7A, 0x21, 0x8B, 0x2C, 0x05, 0x45, 0x1D, 0xA1, 0x32, 0xC7, 0x45, 0x53, 0x2A, 0x03, 0x6C, 0x1C, 0xBE, 0x29, 0x18, 0x45, 0x32, 0x98, 0x24, 0xEA, 0x61, 0x56, 0x37, 0x03, 0x43, 0x34, 0xB8, 0x2F, 0x74, 0x95, 0x1C, 0x7B, 0x97, 0x0F, 0xEB, 0xB1, 0x3A, 0x40, 0xE7, 0x5E, 0x55, 0x06, 0x6C, 0xD4, 0x69, 0x4E, 0x1C, 0x7B, 0x96, 0x0F, 0xEB, 0x76, 0x75, 0x07, 0xAE, 0x8A, 0xA7, 0xCC, 0x3E, 0xA1, 0x83, 0x63, 0x23, 0x50, 0x4F, 0xD3, 0x6D, 0x1A, 0xC8, 0xDF, 0xB8, 0x22, 0x9C, 0x23, 0x54, 0x4B, 0x8D, 0x5D, 0xA5, 0xAF, 0x9C, 0xB1, 0x90, 0x1C, 0x07, 0x2E, 0x28, 0x53, 0xA1, 0x0E, 0x71, 0x30, 0x80, 0xB6, 0xFB, 0x5E, 0x7A, 0x47, 0x7C, 0xD0, 0x27, 0x24, 0xA3, 0x20, 0x96, 0xD7, 0x8F, 0x5E, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x75, 0x4F, 0x51, 0x4A, 0x4C, 0x4A, 0x63, 0x62, 0x55, 0x6F, 0x71, 0x6A, 0x6C, 0x0C, 0x22, 0x2B, 0x39, 0x6F, 0x06, 0x02, 0x0D, 0x06, 0x26, 0x43, 0x7F, 0x45, 0x06, 0x6A, 0x6C, 0x6A, 0x43, 0x42, 0x22, 0x6F, 0x71, 0x6A, 0x6C, 0x6A, 0x43, 0x35, 0x55, 0x6F, 0x71, 0x6A, 0x6C, 0x6A, 0x43, 0x42, 0x7F, 0x18, 0x71, 0x6A, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x6F, 0x06, 0x6A, 0x6C, 0x1D, 0x43, 0x42, 0x55, 0x6F, 0x71, 0x1D, 0x6C, 0x6A, 0x43, 0x42, 0x7F, 0x6F, 0x71, 0x6A, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x6F, 0x71, 0x6A, 0x6C, 0x6A, 0x43, 0x45, 0x5B, 0x6F, 0x71, 0x1D, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x6F, 0x5B, 0x6A, 0x6C, 0x64, 0x4E, 0x40, 0x57, 0x62, 0x7F, 0x15, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x13, 0x71, 0x16, 0x62, 0x67, 0x4E, 0x1E, 0x55, 0x6F, 0x5B, 0x6A, 0x63, 0x6A, 0x43, 0x42, 0x55, 0x6F, 0x71, 0x6A, 0x6E, 0x67, 0x4D, 0x4C, 0x2A, 0x10, 0x78, 0x6A, 0x62, 0x67, 0x44, 0x42, 0x55, 0x6F, 0x5B, 0x36, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x10, 0x71, 0x6A, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x6F, 0x71, 0x65, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x6F, 0x5B, 0x16, 0x6B, 0x67, 0x4D, 0x3D, 0x2A, 0x63, 0x71, 0x6A, 0x6C, 0x64, 0x3C, 0x3D, 0x5B, 0x63, 0x76, 0x6A, 0x6C, 0x6A, 0x43, 0x42, 0x55, 0x6F, 0x5B, 0x6A, 0x2C, 0x6D, 0x4E, 0x4F, 0x58, 0x62, 0x76, 0x64, 0x13, 0x16, 0x4E, 0x4F, 0x52, 0x6F, 0x71, 0x6A, 0x6C, 0x6A, 0x43, 0x68, 0x23, 0x19, 0x07, 0x1C, 0x1A, 0x1C, 0x35, 0x34, 0x23, 0x19, 0x07, 0x1C, 0x1A, 0x1C, 0x35, 0x34, 0x23, 0x19, 0x07, 0x1C, 0x1A, 0x40, 0x00]
    
    r12 = 0
    while r12 < 0x44a:
        byteCode[r12] = byteCode[r12]^charArray[r12%8]
        r12 = r12+1
        
    if(byteCode[0] != 0x55): return False # 0x55  0x19^0x55 = 'L'
    if(byteCode[1] != 0x48): return False # 0x48  0x02^0x48 = 'J'
    if(byteCode[2] != 0x89): return False # 0x89  0xEA^0x89 = 'c'
    if(byteCode[3] != 0xE5): return False # 0xE5  0x87^0xE5 = 'b'
    
    if(input[4:8] != "uOQJ"): return False
    
    #dumpHex(byteCode)
    
    return True

import string
def stage4(input):

    if input[4:8] != "wT96":
        return None

    buffer = [0]*0x100
    for i in range(0x100):
        buffer[i] = i
    
    hashValue = 0
    for i in range(0x100):
        curValue = buffer[i]
        hashValue = (ord(input[i%8])+buffer[i]+hashValue)&0xFF
        buffer[i] = buffer[hashValue]
        buffer[hashValue] = curValue
        
    encrypted = [0xF6, 0x2C, 0x72, 0x1A, 0x03, 0x99, 0x0E, 0x78, 0xBD, 0x90, 0xE9, 0x68, 0xD0, 0x69, 0x37, 0x29, 0xF8, 0x12, 0xF4, 0xE5, 0xD0, 0xFB, 0xF3, 0x7E, 0x72, 0x61, 0x79, 0x19, 0xED, 0x44, 0x12, 0x52, 0xF5, 0xF9, 0xAA, 0x14, 0x36, 0x0D, 0x1F, 0xB2, 0x52, 0x6B, 0xF2, 0x6A, 0xDA, 0x9D, 0xEC, 0x3C]
    decrypted = [0]*0x30
    
    nextIndex = 0
    hashValue = 0
    for i in range(0x30):
        nextIndex = (nextIndex + 1) & 0xFF
        nextEntry = buffer[nextIndex]
        hashValue = (hashValue + nextEntry) & 0xFF
        hashEntry = buffer[hashValue]
        buffer[nextIndex] = buffer[hashValue]
        buffer[hashValue] = nextEntry
        decrypted[i] = encrypted[i] ^ buffer[(hashEntry+nextEntry)&0xFF]
        
    
    return decrypted 
    
def stage5(input, pre):
    
    flagPart1 = 0
    for i in range(8):
        flagPart1 = ord(input[7-i]) | (flagPart1 << 8)
        
    flagPart2 = 0
    for i in range(8):
        flagPart2 = ord(input[15-i]) | (flagPart2 << 8)
        
    flagPart3 = 0
    for i in range(8):
        flagPart3 = ord(input[23-i]) | (flagPart3 << 8)
        
    flagPart4 = 0
    for i in range(4):
        flagPart4 = ord(input[27-i]) | (flagPart4 << 8)
       
    decrypted = stage4(pre)
    # this contains the bswap
    shellCodeValue = (decrypted[7] | (decrypted[6] << 8) | (decrypted[5] << 16) | (decrypted[4] << 24) | (decrypted[3] << 32) | (decrypted[2] << 40) | (decrypted[1] << 48) | (decrypted[0] << 56))
    
    flagPart21 = flagPart2 ^ flagPart1
    flagPart32 = flagPart3 ^ flagPart2
    flagPart43 = flagPart4 ^ flagPart3
    flagPart4F = flagPart4 ^ 0x115C28DA834FEFFD
    return (0x3255557376F68 == flagPart21 and 0x393B415F5A590044 == flagPart32 and 0x665F336B1A566B19 == flagPart43 and flagPart4F == shellCodeValue)


print("Stage1:")
print(stage1("4MoreLevels2GoKeepGoing") == "4ZberYriryf2TbXrrcTbvat")
print("Stage2:")  
print(stage2("r00t")) 
print("Stage3:")
print(stage3("LJcbuOQJ"))
print("Stage4:")
# Checks if the message meant to be send is printable
print(all(chr(c) in string.printable for c in stage4("YrQmwT96")[8:])) 
print("Stage5:")
print(stage5("Y0_daWg_1_h34rd_u_1ik3_fl4gs","YrQmwT96"))
