import struct
bitvec
bitvec = bitvec.replace(" ", "").decode("hex")

data = "ccb0e77bbcc0ee3afc7381d07a6984e248e3d759116bf1b3860b89c5bf536565f0ef6abf0878c42c99353c6cdce0c899c83bef29970bb38bcc9dfc051b67b5ad15c108d045452643456df4efbb4906ca736bbce9509705e597d3b5472bad258baeaf41e5d814f483e6f0c0980aaca195f5b5d353f097ef9dd43b3b0be717071f6cf11e4492b25707b7368f53c9ea109062df1d07b37153611a2b78bfc1b5c63bea2b4417a084ca8fb73b382fe87384ad44eff8ad8c1fea7fcdc5b349050395a744b59169f8956ce587534e4792be80d0801dadf13de3df3561f1e70d71c5024f205ea28bc461320fa8be7e29d16d2ad955470783ea2b79954f3da311ddc11d891100ef8301af49adc10f8be19effa126143b68606bc734c40a1b6d8cc947766532745fe225723274620ab9816ec617e3c5667d00".decode("hex")


mapping  = {-1: 'l', 1: 'r', 16: 'd', -16: 'u'}
possible = [-1, 1, 16, -16]

curPos = 17


def calcPos(str):
    i = 17
    for s in str:
        if s == 'l': i = i - 1
        if s == 'r': i = i + 1
        if s == 'd': i = i + 16
        if s == 'u': i = i - 16
    return i
    
currentInput = ""

import msvcrt

while True:
    print("Current: "+currentInput)
    curPos = calcPos(currentInput)

    goals = [0x83, 0x01, 0xAF, 0x49, 0xAD, 0xC1, 0x0F, 0x8B, 0xe1]
    goals = [0x100 - g for g in goals]

    for y in range(16):
        layer = []
        for x in range(16):
            pos = x + y*16
            d = ord(data[pos])
            v = struct.unpack("H", bitvec[d*2:d*2+2])[0]
            if pos in goals:
                layer.append(str(goals.index(pos)))
            elif v == 0:
                if pos == curPos:
                    layer.append('O')
                else:
                    layer.append(' ')
            else:
                layer.append('#')
        print(''.join(layer))
        
    currentInput = currentInput +msvcrt.getch()