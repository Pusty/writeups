from unicorn import *
from unicorn.x86_const import *
import string

import struct
class magic(object):
    def __init__(self):
        self.mu = Uc(UC_ARCH_X86, UC_MODE_64)
        self.fibbo = [0x48, 0xC7, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x48, 0xC7, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x48, 0xC7, 0xC7, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x12, 0x48, 0x89, 0xD0, 0x48, 0x01, 0xF8, 0x48, 0x89, 0xC3, 0x48, 0x89, 0xD7, 0x48, 0x89, 0xDA, 0x48, 0xFF, 0xC9, 0x48, 0x83, 0xF9, 0x00, 0x75, 0xE8, 0x48, 0x89, 0xC3, 0xC3]
        self.rxor  = [0xBE, 0xFF, 0xFF, 0xFF, 0xFF, 0x31, 0xCE, 0xB9, 0x07, 0x00, 0x00, 0x00, 0x89, 0xF0, 0x83, 0xE0, 0x01, 0xF7, 0xD8, 0x89, 0xC3, 0x89, 0xF0, 0xD1, 0xE8, 0x89, 0xC2, 0x89, 0xD8, 0x25, 0x20, 0x83, 0xB8, 0xED, 0x31, 0xD0, 0x89, 0xC6, 0xFF, 0xC9, 0x79, 0xE2, 0x89, 0xF0, 0xC3]
        
        self.brutexor = [0xBE, 0xFF, 0xFF, 0xFF, 0xFF, 0x89, 0xCF, 0x89, 0xF9, 0x81, 0xE1, 0xFF, 0x00, 0x00, 0x00, 0x31, 0xCE, 0xB9, 0x07, 0x00, 0x00, 0x00, 0x89, 0xF0, 0x83, 0xE0, 0x01, 0xF7, 0xD8, 0x89, 0xC3, 0x89, 0xF0, 0xD1, 0xE8, 0x89, 0xC2, 0x89, 0xD8, 0x25, 0x20, 0x83, 0xB8, 0xED, 0x31, 0xD0, 0x89, 0xC6, 0x83, 0xE9, 0x01, 0x79, 0xE1, 0x89, 0xF9, 0xC1, 0xE9, 0x08, 0x81, 0xE1, 0xFF, 0x00, 0x00, 0x00, 0x31, 0xCE, 0xB9, 0x07, 0x00, 0x00, 0x00, 0x89, 0xF0, 0x83, 0xE0, 0x01, 0xF7, 0xD8, 0x89, 0xC3, 0x89, 0xF0, 0xD1, 0xE8, 0x89, 0xC2, 0x89, 0xD8, 0x25, 0x20, 0x83, 0xB8, 0xED, 0x31, 0xD0, 0x89, 0xC6, 0x83, 0xE9, 0x01, 0x79, 0xE1, 0x89, 0xF9, 0xC1, 0xE9, 0x10, 0x81, 0xE1, 0xFF, 0x00, 0x00, 0x00, 0x31, 0xCE, 0xB9, 0x07, 0x00, 0x00, 0x00, 0x89, 0xF0, 0x83, 0xE0, 0x01, 0xF7, 0xD8, 0x89, 0xC3, 0x89, 0xF0, 0xD1, 0xE8, 0x89, 0xC2, 0x89, 0xD8, 0x25, 0x20, 0x83, 0xB8, 0xED, 0x31, 0xD0, 0x89, 0xC6, 0x83, 0xE9, 0x01, 0x79, 0xE1, 0xF7, 0xD6, 0x89, 0xF0, 0xC3]
        
        self.code = ''.join(map(chr,self.brutexor))
        
        self.mu.mem_map(0x80000,0x4000)
        self.mu.mem_map(0x7ffff000,0x200000)
        
        self.mu.mem_write(0x80000, self.code)

    def _start_unicorn(self, startaddr):
        try:
            self.mu.emu_start(startaddr, 0)
        except Exception as e:
            if self.mu.reg_read(UC_X86_REG_RIP) == 1:
                return
            else:
                raise e
    def run(self, index):
        self.mu.reg_write(UC_X86_REG_RCX, index)
        self.mu.reg_write(UC_X86_REG_RSP, 0x7fffff00)
        self.mu.mem_write(0x7fffff00, '\x01\x00\x00\x00')
        self._start_unicorn(0x80000L)
        return self.mu.reg_read(UC_X86_REG_RAX)

m = magic()

bruteForceLight =  string.ascii_lowercase+" .,"

f = open("magicRainbowTable.txt" , "w")
for a in bruteForceLight:
    for b in bruteForceLight:
        for c in bruteForceLight:
            v = m.run(((ord(c)&0xFF)<<16)+((ord(b)&0xFF)<<8)+(ord(a)&0xFF))
            f.write(str(v)+"#"+a+"#"+b+"#"+c+"#\n")

f.close()