using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Web.Script.Serialization;

public class MainClass {
    public static byte[] byte_0 = Encoding.ASCII.GetBytes("20180203");

	public static byte[] byte_1 = Convert.FromBase64String("gPzN1l7iiLssQ2T760buzg==");

	public static byte[] byte_2 = Convert.FromBase64String("gPzN1l7iiLssQ2T760buzg==");

	public string destName;

	public string[] srcNames;

	public MemoryStream memoryStream;

	public byte[] dataFirstHalf;

	public byte[] dataSecondHalf;

	public byte[] first8Bytes;
    
	public static void smethod_0(Stream stream_0, Stream stream_1) {
		byte[] array = new byte[32768];
		int count;
		while ((count = stream_0.Read(array, 0, array.Length)) > 0)
		{
			stream_1.Write(array, 0, count);
		}
	}

	public MainClass(string[] argv) {
		this.destName = argv[0];
		this.srcNames = new string[argv.Length - 1];
		Array.Copy(argv, 1, this.srcNames, 0, argv.Length - 1);
		this.memoryStream = new MemoryStream();
	}

	public bool downloadRawContent(string downloadUrl)
	{
		HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(downloadUrl);
		httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36";
		HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
		if (httpWebResponse.StatusCode == HttpStatusCode.OK)
		{
			Encoding ascii = Encoding.ASCII;
			string data;
			using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream(), ascii)) {
				data = streamReader.ReadToEnd();
			}
			this.processData(data);
		}
		if (this.dataFirstHalf == null)
		{
			Console.WriteLine("Failed to load remote data");
			this.loadDefaultValues();
		}
		httpWebResponse.Close();
		return true;
	}

	public string formatRawData(string string_2)
	{
		string text = "[//]: # (";
		string value = ")";
		using (StringReader stringReader = new StringReader(string_2))
		{
			string text2 = string.Empty;
			int num;
			do
			{
				text2 = stringReader.ReadLine();
				if (text2 != null && text2.StartsWith(text))
				{
					num = text2.IndexOf(value, text.Length);
					if (num > 0)
					{
						goto Block_5;
					}
				}
			}
			while (text2 != null);
			goto IL_70;
			Block_5:
			return text2.Substring(text.Length, num - text.Length);
		}
		IL_70:
		return null;
	}

	public bool processData(string data) {
		string dataProcessed = this.formatRawData(data);
		if (dataProcessed == null)
			return false;
		if (dataProcessed.Length < 8)
			return false;
		this.first8Bytes = Encoding.ASCII.GetBytes(dataProcessed.Substring(0, 8));
		byte[] decodedData = Convert.FromBase64String(dataProcessed.Substring(8));
		if (decodedData.Length != 32)
			return false;
		this.dataFirstHalf = new byte[16];
		this.dataSecondHalf = new byte[16];
		Array.Copy(decodedData, 0, this.dataFirstHalf, 0, 16);
		Array.Copy(decodedData, 16, this.dataSecondHalf, 0, 16);
		if (this.first8Bytes.Length != 8)
			throw new ArgumentException("1");
		if (this.dataFirstHalf.Length != 16)
			throw new ArgumentException("2");
		if (this.dataSecondHalf.Length != 16)
			throw new ArgumentException("3");
		return true;
	}

	public bool loadDefaultValues() {
		this.first8Bytes = MainClass.byte_0;
		this.dataFirstHalf = MainClass.byte_1;
		this.dataSecondHalf = MainClass.byte_2;
		if (this.first8Bytes.Length != 8)
		{
			throw new ArgumentException("1");
		}
		if (this.dataFirstHalf.Length != 16)
		{
			throw new ArgumentException("2");
		}
		if (this.dataSecondHalf.Length != 16)
		{
			throw new ArgumentException("3");
		}
		return true;
	}

	public byte[] encrypt() {
		this.memoryStream.Seek(0L, SeekOrigin.Begin);
		byte[] result;
		using (Aes aes = Aes.Create())
		{
			aes.KeySize = 256;
			aes.Key = this.dataFirstHalf;
			aes.IV = this.dataSecondHalf;
			aes.Padding = PaddingMode.PKCS7;
			aes.Mode = CipherMode.CBC;
			ICryptoTransform transform = aes.CreateEncryptor();
			using (MemoryStream memoryStream = new MemoryStream())
			{
				using (CryptoStream cryptoStream = new CryptoStream(memoryStream, transform, CryptoStreamMode.Write))
				{
					byte[] array = this.memoryStream.ToArray();
					cryptoStream.Write(array, 0, array.Length);
				}
				result = memoryStream.ToArray();
			}
		}
		return result;
	}

	public bool addFileToStream(string filePath) {
		Console.WriteLine("Adding file {0}", filePath);
		byte[] array = File.ReadAllBytes(filePath);
		byte[] sha256Hash;
		using (SHA256 sha = SHA256.Create())
		{
			sha256Hash = sha.ComputeHash(array);
		}
		long dataLength = (long)array.Length;
		byte[] lengthEncoded = BitConverter.GetBytes(dataLength);
		byte[] encodedName = Encoding.UTF8.GetBytes(filePath);
		byte[] encodedNameLength = BitConverter.GetBytes(encodedName.Length);
		this.memoryStream.Write(encodedNameLength, 0, encodedNameLength.Length);
		this.memoryStream.Write(encodedName, 0, encodedName.Length);
		this.memoryStream.Write(sha256Hash, 0, sha256Hash.Length);
		this.memoryStream.Write(lengthEncoded, 0, lengthEncoded.Length);
		this.memoryStream.Write(array, 0, array.Length);
		return true;
	}

	public string getDownloadURL(string string_2) {
		string[] array = string_2.Split(new char[]
		{
			'/'
		});
		string arg = array[3];
		string arg2 = array[4];
		int num = string_2.IndexOf("master/");
		if (num < 0)
		{
			throw new ArgumentException("4");
		}
		string arg3 = string_2.Substring(num + "master/".Length);
		string requestUriString = string.Format("https://api.github.com/repos/{0}/{1}/contents/{2}", arg, arg2, arg3);
		HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);
		httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36";
		HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
		if (httpWebResponse.StatusCode == HttpStatusCode.OK)
		{
			Encoding ascii = Encoding.ASCII;
			string input;
			using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream(), ascii))
			{
				input = streamReader.ReadToEnd();
				goto IL_CD;
			}
			goto IL_C2;
			IL_CD:
			JavaScriptSerializer javaScriptSerializer = new JavaScriptSerializer();
			Dictionary<string, object> dictionary = javaScriptSerializer.Deserialize<Dictionary<string, object>>(input);
			return (string)dictionary["download_url"];
		}
		IL_C2:
		throw new WebException("5");
	}

    //this get's called
	public bool main() {
		string download = this.getDownloadURL("https://github.com/johnsmith2121/react/blob/master/README.md");
		if (download == null)
			return false;
		this.downloadRawContent(download);
		foreach (string srcName in this.srcNames)
			this.addFileToStream(srcName);
		byte[] dataEncrypted = this.encrypt();
		using (FileStream fileStream = File.Open(this.destName, FileMode.Create))
		{
			byte[] bytes = Encoding.ASCII.GetBytes("cryptar");
			fileStream.Write(bytes, 0, bytes.Length);
			fileStream.Write(this.first8Bytes, 0, this.first8Bytes.Length);
			fileStream.Write(dataEncrypted, 0, dataEncrypted.Length);
		}
		return true;
	}
}
